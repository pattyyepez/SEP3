@page "/view-my-account"
@layout LoginLayout
@using System.Security.Claims
@using DTOs.HouseOwner
@using DTOs.HouseSitter
@using HousePalClient.Components.Layout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Services
@rendermode InteractiveServer

@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHouseOwnerService HouseOwnerService
@inject IHouseSitterService HouseSitterService

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        @if (_houseOwnerProfile != null)
        {
            <div class="account-page">
                <div class="profile-container">
                    <div>
                        <img src="https://localhost:7134/Filesave/@_houseOwnerProfile.ProfilePicture.Split('.')[0]/@_houseOwnerProfile.ProfilePicture.Split('.')[1]" alt="Profile picture" class="profile-img"/>
                        <h1 class="user-name"> @_houseOwnerProfile.Name</h1>
                    </div>

                    <hr class="section-divider"/>

                    <div class="info-section">
                        <h2>Personal Information</h2>
                        <p><strong>Email:</strong> @_houseOwnerProfile.Email</p>
                        <p><strong>Phone:</strong> @_houseOwnerProfile.Phone</p>
                        <p><strong>Address:</strong> @_houseOwnerProfile.Address</p>
                    </div>

                    <hr class="section-divider"/>

                    <div class="bio-section">
                        <h2>Biography</h2>
                        <p>@_houseOwnerProfile.Biography</p>
                    </div>

                    <hr class="section-divider"/>

                    <div class="action-buttons">
                        <button type="button" class="btn btn-primary" @onclick="EditAccountHouseOwner">Edit Account</button>
                        <button type="button" class="btn btn-secondary" @onclick="DeleteAccount">Delete Account</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Loading house owner profile...</p>
        }
    </AuthorizeView>

    <AuthorizeView Roles="HouseSitter">
        <h4>Hello, @context.User.Identity?.Name!</h4>
        
        @if (_houseSitterProfile != null)
        {
            <div class="profile-container">
                <h2>House Sitter Profile</h2>
                <p><strong>Name:</strong> @_houseSitterProfile.Name</p>
                <p><strong>Email:</strong> @_houseSitterProfile.Email</p>
                <p><strong>Phone:</strong> @_houseSitterProfile.Phone</p>
                <p><strong>Biography:</strong> @_houseSitterProfile.Biography</p>
                <p><strong>Experience:</strong> @_houseSitterProfile.Experience</p>
                <p><strong>Skills:</strong> @string.Join(", ", _houseSitterProfile.Skills)</p>
                
                @if (_houseSitterProfile.Pictures != null && _houseSitterProfile.Pictures.Any())
                {
                    <div>
                        <h4>Pictures:</h4>
                        @foreach (var picture in _houseSitterProfile.Pictures)
                        {
                            <img src="https://localhost:7134/Filesave/@picture.Split('.')[0]/@picture.Split('.')[1]" alt="House Sitter Picture" class="profile-img" />
                        }
                    </div>
                }
                <button class="btn-edit" @onclick="EditAccountHouseSitter">Edit Account</button>
                <button class="btn-delete" @onclick="DeleteAccount">Delete Account</button>
            </div>
        }
        else
        {
            <p>Loading house sitter profile...</p>
        }
    </AuthorizeView>
</CascadingAuthenticationState>

<style>

    @@font-face {
        font-family: 'LogoFont';
        src: url('http://localhost:[puerto]/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    
    .account-page {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100vw;
        background: linear-gradient(150deg, #ff7e5f, #feb47b);
    }
    
    .profile-container {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        width: 40%;
        max-width: 600px;
        padding: 2em;
        text-align: center;
        font-family: 'FuturaFont', sans-serif;

    }
    
    .profile-container {
        margin-bottom: 1.5em;
    }

    .profile-img {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 0.5em;
    }
    
    .user-name {
        font-size: 2rem;
        color: #ff7e5f;
        margin: 0;
    }
    
    .info-section, .bio-section {
        text-align: left;
        margin-bottom: 1em;
    }

    h2 {
        text-align: center;
        color: #3d3d3d;
        font-family: 'LogoFont', sans-serif;
        font-size: 1.5rem;
        margin-bottom: 0.5em;
    }

    p {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        font-size: 1rem;
        margin: 0.5em 0;
    }

    .action-buttons {
        margin-top: 2em;
        display: flex;
        gap: 2em;
        justify-content: center;
    }

    .section-divider {
        margin: 2em 0;
        border: 0;
        height: 1px;
        background-color: #ddd;
    }
    
</style>

@code {
    private HouseOwnerDto? _houseOwnerProfile;
    private HouseSitterDto? _houseSitterProfile;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("HouseOwner"))
            {
                var ownerIdClaim = user.FindFirst("Id")?.Value;
                if (ownerIdClaim != null && int.TryParse(ownerIdClaim, out var ownerId))
                {
                    _houseOwnerProfile = await HouseOwnerService.GetSingleAsync(ownerId);
                }
            }
            else if (user.IsInRole("HouseSitter"))
            {
                var sitterIdClaim = user.FindFirst("Id")?.Value;
                if (sitterIdClaim != null && int.TryParse(sitterIdClaim, out var sitterId))
                {
                    _houseSitterProfile = await HouseSitterService.GetSingleAsync(sitterId);
                }
            }
        }
        else
        {
            Console.WriteLine("User is NOT authenticated.");
        }
    }

    private void EditAccountHouseOwner()
    {
        Navigation.NavigateTo("/edit-account-owner");
    }

    private void EditAccountHouseSitter()
    {
        Navigation.NavigateTo("/edit-account-sitter");
    }

    private async Task DeleteAccount()
    {
        if (_houseOwnerProfile != null)
        {
            await HouseOwnerService.DeleteAsync(_houseOwnerProfile.UserId);
        }
        else if (_houseSitterProfile != null)
        {
            await HouseSitterService.DeleteAsync(_houseSitterProfile.UserId);
        }

        Navigation.NavigateTo("/");

    }

}