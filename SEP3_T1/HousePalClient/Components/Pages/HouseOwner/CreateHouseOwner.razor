@using DTOs
@using DTOs.HouseOwner
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using MediaTypeHeaderValue = System.Net.Http.Headers.MediaTypeHeaderValue
@layout LoginLayout
@inject NavigationManager Navigation
@inject IHouseOwnerService HouseOwnerService
@inject ILogger<CreateHouseOwner> Logger
@inject HttpClient Http
@rendermode InteractiveServer
@page "/house-owner-signup"


<div class="page-container-signup">
    <div class="signup-page-container">
        <h1>Create Your House Owner Account</h1>

        <form class="house-owner-form" @onsubmit="CreateOwner">
            <!-- Account Information Fields -->
            <div class="form-section">
                <h2>Account Information</h2>

                <label for="email">Email:</label>
                <input type="email" class="form-control" id="email"
                       placeholder="Enter your email" @bind="_email" required/>

                <label>Password:</label>
                <input type="password" class="form-control"
                       placeholder="Create a password" @bind="_password"
                       required/>

                <label>Confirm Password:</label>
                <input type="password" class="form-control"
                       placeholder="Confirm your password"
                       @bind="_confirmPassword" required/>
            </div>

            <!-- Personal Information Fields -->
            <div class="form-section">
                <h2>Personal Information</h2>

                <label>Name:</label>
                <input type="text" class="form-control"
                       placeholder="Enter your name" @bind="_name" required/>

                <label>CPR Number:</label>
                <input type="text" class="form-control"
                       placeholder="Enter your CPR number" @bind="_cpr"
                       required/>

                <label>Phone Number:</label>
                <input type="tel" class="form-control"
                       placeholder="Enter your phone number" @bind="_phone"
                       required/>

                <label>Home Address:</label>
                <input type="text" class="form-control"
                       placeholder="Enter your home address" @bind="_address"
                       required/>
            </div>

            <!-- Introduction Section -->
            <div class="form-section">
                <h2>Introduce Yourself</h2>

                <label>Short Introduction:</label>
                <textarea class="form-control" rows="4"
                          placeholder="Write a brief introduction"
                          @bind="_biography" required></textarea>
                <label>Upload a Profile Picture:</label>
                <InputFile OnChange="OnInputProfilePictureChange"
                           accept="image/*" class="form-control"/>

                @if (!string.IsNullOrEmpty(_profilePictureUrl))
                {
                    <hr/>
                    <p>Uploaded picture:</p>
                    <img class="profile-picture"
                         src="https://localhost:7134/Filesave/@_profilePictureUrl.Split('.')[0]/@_profilePictureUrl.Split('.')[1]"
                         alt="Uploaded picture"/>
                }

            </div>

            <!-- Display Message if exists -->
            @if (!string.IsNullOrEmpty(_message))
            {
                <div class="alert alert-danger">@_message</div>
            }

            <!-- Submit Button -->
            <div class="button-group">
                <button type="submit" class="create-button">
                    Create Account
                </button>
                <button type="button" @onclick="OpenCancelModal"
                        class="btn btn-secondary">
                    Cancel
                </button>
            </div>

        </form>
    </div>
</div>
@if (_showSuccessMessage)
{
    <div class="modal-background">
        <div class="modal-content">
            <h2>Hello, @_name!</h2>
            <p>Your account has been created successfully.</p>
            <button @onclick="RedirectToLogin" class="btn btn-primary">
                Go to Login
            </button>
        </div>
    </div>
}
@if (_showCancelConfirmation)
{
    <div class="modal-background">
        <div class="modal-content">
            <h2>Confirmation</h2>
            <p>Are you sure you want to cancel? All changes will be lost.</p>
            <div class="modal-actions">
                <button @onclick="ConfirmCancel" class="btn btn-primary">
                    Yes
                </button>
                <button @onclick="CloseCancelModal" class="btn btn-secondary">
                    No
                </button>
            </div>
        </div>
    </div>
}


<style>
</style>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private string _confirmPassword = string.Empty;
    private string _name = string.Empty;
    private string _cpr = string.Empty;
    private string _phone = string.Empty;
    private string _address = string.Empty;
    private string _biography = string.Empty;
    private string _message = string.Empty;
    private string _profilePictureUrl = string.Empty;
    private bool _showSuccessMessage;

    private readonly List<FileDto> _uploadResults = [];
    private bool _showCancelConfirmation;

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void OpenCancelModal()
    {
        _showCancelConfirmation = true;
    }

    private void CloseCancelModal()
    {
        _showCancelConfirmation = false;
    }

    private void ConfirmCancel()
    {
        _email = string.Empty;
        _password = string.Empty;
        _confirmPassword = string.Empty;
        _name = string.Empty;
        _cpr = string.Empty;
        _phone = string.Empty;
        _address = string.Empty;
        _biography = string.Empty;
        _message = string.Empty;
        _profilePictureUrl = string.Empty;

        _showSuccessMessage = false;

        _showCancelConfirmation = false;
        Navigation.NavigateTo("/");
    }

    private async Task CreateOwner()
    {
        _message = string.Empty;

        if (_password != _confirmPassword)
        {
            _message = "Passwords do not match.";
            return;
        }

        var createHouseOwnerDto = new CreateHouseOwnerDto
        {
            Name = _name,
            Email = _email,
            Password = _password,
            ProfilePicture = _profilePictureUrl,
            CPR = _cpr,
            Phone = _phone,
            Address = _address,
            Biography = _biography
        };

        try
        {
            await HouseOwnerService.AddAsync(createHouseOwnerDto);
            _showSuccessMessage = true;
            _message = $"House Owner created successfully!";
        }
        catch (Exception e)
        {
            var message = e.Message.Split('"').Length == 3 ? e.Message.Split('"')[1] : e.Message.Split('"')[4];
            _message = message.Remove(message.Length);
        }
    }


    private async Task OnInputProfilePictureChange(InputFileChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(_profilePictureUrl))
            await Http.DeleteAsync($"/Filesave/{_profilePictureUrl.Split('.')[0]}/{_profilePictureUrl.Split('.')[1]}");

        long maxFileSize = long.MaxValue;
        var upload = false;

        using var content = new MultipartFormDataContent();

        var file = e.GetMultipleFiles(1).FirstOrDefault();
        if (_uploadResults.SingleOrDefault(
                f => f.FileName == file!.Name) is null)
        {
            try
            {
                var fileContent = new StreamContent(file!.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType =
                    new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                Logger.LogInformation(
                    $"{file!.Name} not uploaded (Err: 6): {ex.Message}",
                    file.Name, ex.Message);

                _uploadResults.Add(
                    new FileDto
                    {
                        FileName = file.Name,
                        ErrorCode = 6,
                        Uploaded = false
                    });
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/Filesave", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<FileDto>>();

            if (newUploadResults is not null)
            {
                _profilePictureUrl = newUploadResults.FirstOrDefault()!.StoredFileName!;
            }
        }
    }

}