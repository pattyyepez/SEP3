@page "/view-my-past-stays-ho"
@using System.Security.Claims
@using DTOs.HouseListing
@using DTOs.SitterReview
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@layout MainLayout

@inject NavigationManager Navigation
@inject IApplicationService ApplicationService
@inject IHouseListingService HouseListingService
@inject ISitterReviewService SitterReviewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PreloadService PreloadService

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
            <div class="listings-container">
                @if (_houseListings == null || !_houseListings.Any())
                {
                    <p>No listings found.</p>
                }
                else
                {
                    @foreach (var listing in _houseListings)
                    {
                        <div class="listing-container">
                            <!-- House Information -->
                            <div class="house-info">
                                <img src="https://localhost:7134/Filesave/@listing.Profile.Pictures[0].Split('.')[0]/@listing.Profile.Pictures[0].Split('.')[1]" alt="House Picture" class="house-image"/>
                                <h2 class="listing-title">
                                    <a href="https://localhost:7262/view-listing/@listing.Id" target="_blank">@listing.Profile.Title</a>
                                </h2>
                                <p class="listing-dates">@listing.StartDate.ToShortDateString() - @listing.EndDate.ToShortDateString()</p>
                            </div>

                            <!-- Applicants Information -->
                            <div class="applicants-container">
                                <div class="applicants-scroll">
                                    @if (listing.Applications != null && listing.Applications.Any())
                                    {
                                        @foreach (var application in listing.Applications)
                                        {
                                            <div class="card">
                                                <div class="card-img-container">
                                                    <img src="https://localhost:7134/Filesave/@application.Sitter!.ProfilePicture!.Split('.')[0]/@application.Sitter.ProfilePicture.Split('.')[1]" alt="...">
                                                </div>

                                                <div class="card-body">
                                                    <div class="title-rating">
                                                        <a href="https://localhost:7262/view-sitter-profile/@application.SitterId" target="_blank">
                                                            <h5>@application.Sitter.Name</h5>
                                                        </a>
                                                    </div>

                                                    <div class="button-container">
                                                        @if (application.Sitter.Reviews != null && application.Sitter.Reviews.Any())
                                                        {
                                                            <p class="card-text contact" style="font-style: italic">
                                                                Your past review of @application.Sitter.Name:
                                                            </p>

                                                            <div class="card">
                                                                <div class="card-body">
                                                                    <div class="stars">
                                                                        @foreach (var star in GetStars(application.Sitter.Reviews.Single()))
                                                                        {
                                                                            <span class="@star"></span>
                                                                        }
                                                                    </div>
                                                                    <p>@application.Sitter.Reviews.Single().Comment</p>
                                                                    <p>@application.Sitter.Reviews.Single().Date</p>
                                                                </div>
                                                            </div>

                                                            <button class="orange-button" disabled="@(!application.Sitter.Reviews.First().Editable.Value)" @onclick="() => ShowEditReview(application.SitterId)">Edit Review</button>
                                                        }
                                                        else
                                                        {
                                                            <p class="card-text contact" style="font-style: italic">
                                                                @application.Sitter.Name finished their stay at your house.
                                                            </p>

                                                            <button class="orange-button" @onclick="() => ShowCreateReview(application.SitterId)">Create Review</button>
                                                        }
                                                    </div>

                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <h3 class="create-titles">You have no applications for this listing</h3>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>

            @if (_showModal)
            {
                <div class="modal-background">
                    <div class="modal-content">
                        @if (_creatingReview)
                        {
                            <form @onsubmit="CreateReview">

                                <h3 class="create-titles">Create review for sitter</h3>
                                <textarea @bind="_reviewComment" placeholder="Comment on the sitter's performance" class="review-textarea" required></textarea>
                                <select @bind="_reviewRating" class="review-rating-select" required>
                                    <option value="" disabled selected>Rate the sitter (out of 5)</option>
                                    <option value="1">1 - Poor</option>
                                    <option value="2">2 - Fair</option>
                                    <option value="3">3 - Good</option>
                                    <option value="4">4 - Very Good</option>
                                    <option value="5">5 - Excellent</option>
                                </select>

                                <div class="button-group">
                                    <button type="submit" class="orange-button">Create Review</button>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelCreateReview">Close</button>
                                </div>

                            </form>
                        }
                        else
                        {
                            <form @onsubmit="EditReview">

                                <h3 class="create-titles">Edit review for sitter</h3>
                                <textarea @bind="_reviewComment" placeholder="Comment on the sitter's performance" class="review-textarea" required></textarea>
                                <select @bind="_reviewRating" class="review-rating-select" required>
                                    <option value="" disabled selected>Rate the sitter (out of 5)</option>
                                    <option value="1">1 - Poor</option>
                                    <option value="2">2 - Fair</option>
                                    <option value="3">3 - Good</option>
                                    <option value="4">4 - Very Good</option>
                                    <option value="5">5 - Excellent</option>
                                </select>

                                <div class="button-group">
                                    <button type="submit" class="orange-button">Save Edit</button>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelEditReview">Close</button>

                                </div>
                            </form>
                        }
                    </div>
                </div>
            }

        </Authorized>
    </AuthorizeView>

    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private List<HouseListingDto>? _houseListings;
    private int _userId;
    private int _sitterIdForReview;
    private string? _reviewComment = string.Empty;
    private int? _reviewRating;

    private bool _showModal;
    private bool _creatingReview;

    protected override async Task OnInitializedAsync()
    {
        _houseListings = new List<HouseListingDto>();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadUpcomingHouseListings();
        // await LoadApplications();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadUpcomingHouseListings()
    {
        PreloadService.Show();
        _houseListings = await Task.Run(() => HouseListingService.GetPastStaysHo(_userId).ToList());
        PreloadService.Hide();
    }

    private void ShowCreateReview(int sitterId)
    {
        _sitterIdForReview = sitterId;
        _reviewComment = string.Empty;
        _reviewRating = null;
        _creatingReview = true;
        _showModal = true;
    }

    private void CancelCreateReview()
    {
        _showModal = false;
    }

    private void ShowEditReview(int sitterId)
    {
        _sitterIdForReview = sitterId;
        var existingReview = _houseListings
            .SelectMany(listing => listing.Applications)
            .FirstOrDefault(app => app.SitterId == sitterId)?.Sitter?.Reviews.SingleOrDefault();

        if (existingReview != null)
        {
            _reviewComment = existingReview.Comment;
            _reviewRating = existingReview.Rating;
        }
        else
        {
            _reviewComment = string.Empty;
            _reviewRating = null;
        }

        _creatingReview = false;
        _showModal = true;
    }

    private void CancelEditReview()
    {
        _showModal = false;
    }

    private async Task CreateReview()
    {
        PreloadService.Show();
        CreateSitterReviewDto review = new CreateSitterReviewDto
        {
            OwnerId = _userId,
            SitterId = _sitterIdForReview,
            Comment = _reviewComment,
            Rating = _reviewRating.Value
        };

        await SitterReviewService.AddAsync(review);
        await LoadUpcomingHouseListings();
        // await LoadApplications();
        _showModal = false;
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task EditReview()
    {
        PreloadService.Show();
        UpdateSitterReviewDto review = new UpdateSitterReviewDto()
        {
            OwnerId = _userId,
            SitterId = _sitterIdForReview,
            Comment = _reviewComment,
            Rating = _reviewRating.Value
        };

        await SitterReviewService.UpdateAsync(review);
        await LoadUpcomingHouseListings();
        // await LoadApplications();
        _showModal = false;
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private List<string> GetStars(SitterReviewDto? review)
    {
        var stars = new List<string>();

        int fullStars = review.Rating;
        int emptyStars = 5 - fullStars;

        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }

}