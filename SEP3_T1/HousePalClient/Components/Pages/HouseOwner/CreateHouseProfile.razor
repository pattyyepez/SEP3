@page "/create-house-profile"
@using System.Net.Http.Headers
@using System.Security.Claims
@using DTOs
@using DTOs.HouseProfile
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc.Rendering
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseProfileService HouseProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<CreateHouseProfile> Logger
@inject HttpClient Http
@rendermode InteractiveServer

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
            <div class="page-container">
                <div class="signup-page-container">
                    <h1 class="title">Create Your House Profile</h1>

                    <form class="house-profile-form" @onsubmit="CreateProfile">
                        <!-- House Profile Information Fields -->
                        <div class="form-section">
                            <h2>House Information</h2>

                            <label>Title:</label>
                            <input type="text" class="form-control" placeholder="Enter title" @bind="_title" required/>

                            <label>Description:</label>
                            <textarea class="form-control" rows="4" placeholder="Describe your house" @bind="_description" required></textarea>

                            <label>City:</label>
                            <input type="text" class="form-control" placeholder="Enter city" @bind="_city" required/>

                            <label>Region:</label>
                            <input type="text" class="form-control" placeholder="Enter region" @bind="_region" required/>

                            <label>Address:</label>
                            <input type="text" class="form-control" placeholder="Enter address" @bind="_address" required/>
                        </div>

                        <!-- Amenities, Chores, and Rules Section -->
                        <div class="form-section">
                            <h2>Details</h2>

                            <h3 class="create-titles">Amenities:</h3>
                            @if (_amenities is not null)
                            {
                                <ul>
                                    @foreach (var amenity in _amenities)
                                    {
                                        <li>
                                            <input type="checkbox" @bind="amenity.Selected"/>
                                            <label>@amenity.Text</label>
                                        </li>
                                    }
                                </ul>
                            }

                            <h3 class="create-titles">Chores:</h3>
                            @if (_chores is not null)
                            {
                                <ul>
                                    @foreach (var chore in _chores)
                                    {
                                        <li>
                                            <input type="checkbox" @bind="chore.Selected"/>
                                            <label>@chore.Text</label>
                                        </li>
                                    }
                                </ul>
                            }

                            <h3 class="create-titles">Rules:</h3>
                            @if (_rules is not null)
                            {
                                <ul>
                                    @foreach (var rule in _rules)
                                    {
                                        <li>
                                            <input type="checkbox" @bind="rule.Selected"/>
                                            <label>@rule.Text</label>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>

                        <!-- Upload Pictures Section -->
                        <div class="form-section">
                            <h2>Upload Pictures</h2>

                            <label>Upload At Least 3 Pictures:</label>
                            <InputFile OnChange="OnInputFileChange" accept="image/*" class="form-control" multiple/>

                            @if (_pictures.Count != 0)
                            {
                                <hr/>
                                <p>Uploaded pictures:</p>
                                <div class="uploaded-images-container">
                                    @foreach (var picture in _pictures)
                                    {
                                        <img src="https://localhost:7134/Filesave/@picture.Split('.')[0]/@picture.Split('.')[1]" alt="Uploaded picture"/>
                                    }
                                </div>
                            }
                        </div>

                        <!-- Display Message if exists -->
                        @if (!string.IsNullOrEmpty(_message))
                        {
                            <div class="alert alert-danger">@_message</div>
                        }


                        <!-- Submit Button -->
                        <div class="button-group">
                            <button type="submit" class="create-button">Create House Profile</button>
                            <button type="button" @onclick="OpenCancelModal" class="btn btn-secondary">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>

            @if (_showSuccessMessage)
            {
                <div class="modal-background">
                    <div class="modal-content">
                        <h2>Profile Created!</h2>
                        <p> @_name, your house profile has been created successfully.</p>
                        <button @onclick="RedirectToHome" class="btn btn-primary">Go to Home</button>
                    </div>
                </div>
            }

            @if (_showCancelConfirmation)
            {
            <div class="modal-background">
                <div class="modal-content">
                    <h2>Confirmation</h2>
                    <p>Are you sure you want to cancel? All changes will be lost.</p>
                    <div class="modal-actions">
                        <button @onclick="ConfirmCancel" class="btn btn-primary">
                            Yes
                        </button>
                        <button @onclick="CloseCancelModal" class="btn btn-secondary">
                            No
                        </button>
                    </div>
                </div>
            </div>
            }
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in to create a house profile.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
</style>

@code {
    private string _title = string.Empty;
    private string _description = string.Empty;
    private string _city = string.Empty;
    private string _region = string.Empty;
    private string _address = string.Empty;
    private List<string> _pictures = [];
    private string _message = string.Empty;
    private bool _showSuccessMessage;
    private bool _showCancelConfirmation;
    private string _name = "";
    private int _houseOwnerId;
    private MultiSelectList? _amenities;
    private MultiSelectList? _chores;
    private MultiSelectList? _rules;

    private void RedirectToHome()
    {
        Navigation.NavigateTo("/view-my-houses");
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    
    private void OpenCancelModal()
    {
        _showCancelConfirmation = true;
    }

    private void CloseCancelModal()
    {
        _showCancelConfirmation = false;
    }

    private void ConfirmCancel()
    {
        _title = string.Empty;
        _description = string.Empty;
        _city = string.Empty;
        _region = string.Empty;
        _address = string.Empty;
        _pictures = [];

        _showSuccessMessage = false;

        _showCancelConfirmation = false;
        Navigation.NavigateTo("/view-my-houses");
    }

    private async Task CreateProfile()
    {
        _message = string.Empty;

        var createHouseProfileDto = new CreateHouseProfileDto
        {
            OwnerId = _houseOwnerId,
            Title = _title,
            Description = _description,
            City = _city,
            Region = _region,
            Address = _address,
            Pictures = _pictures
        };

        createHouseProfileDto.Chores = [];
        foreach (var chore in _chores)
        {
            if (chore.Selected)
            {
                createHouseProfileDto.Chores.Add(chore.Text);
            }
        }

        createHouseProfileDto.Rules = [];
        foreach (var rule in _rules)
        {
            if (rule.Selected)
            {
                createHouseProfileDto.Rules.Add(rule.Text);
            }
        }

        createHouseProfileDto.Amenities = [];
        foreach (var amenity in _amenities)
        {
            if (amenity.Selected)
            {
                createHouseProfileDto.Amenities.Add(amenity.Text);
            }
        }

        try
        {
            await HouseProfileService.AddAsync(createHouseProfileDto);
            _showSuccessMessage = true;
            _message = "House Profile created successfully!";
        }
        catch (Exception e)
        {
            var message = e.Message.Split('"').Length == 3 ? e.Message.Split('"')[1] : e.Message.Split('"')[4];
            _message = message.Remove(message.Length);
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var fileToDelete in _pictures)
        {
            if (!string.IsNullOrEmpty(fileToDelete))
                await Http.DeleteAsync($"/Filesave/{fileToDelete.Split('.')[0]}/{fileToDelete.Split('.')[1]}");
        }

        _pictures = [];
        foreach (var file in e.GetMultipleFiles(25))
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(1024 * 1024 * 10)); // 10MB max per file
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(fileContent, "files", file.Name);

            var response = await Http.PostAsync("/Filesave", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<IList<FileDto>>();
                _pictures.AddRange(result.Select(p => p.StoredFileName!).ToList());
            }
            else
            {
                Logger.LogError($"Failed to upload {file.Name}: {response.StatusCode}");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            var houseOwnerIdClaim = user.FindFirst(c => c.Type == "Id");
            if (houseOwnerIdClaim != null)
            {
                _houseOwnerId = int.Parse(houseOwnerIdClaim.Value);
            }

            var nameClaim = user.FindFirst(ClaimTypes.Name);
            if (nameClaim != null)
            {
                _name = nameClaim.Value;
            }
        }
        else
        {
            _message = "User not authenticated.";
        }

        _amenities = new MultiSelectList(HouseProfileService.GetAllAmenities());
        _chores = new MultiSelectList(HouseProfileService.GetAllChores());
        _rules = new MultiSelectList(HouseProfileService.GetAllRules());
        await InvokeAsync(StateHasChanged);
    }

}