@page "/view-my-listings"
@using System.Security.Claims
@using DTOs.HouseListing
@using DTOs.Application
@using DTOs.SitterReview
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@layout MainLayout

@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IApplicationService ApplicationService
@inject IHouseListingService HouseListingService
@inject ISitterReviewService SitterReviewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PreloadService PreloadService

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
            <div class="listings-container">

                @if (_houseListings == null || !_houseListings.Any())
                {
                    <p>No listings found.</p>
                }
                else
                {
                    @foreach (var listing in _houseListings)
                    {
                        <div class="listing-container">
                            <!-- House Information -->
                            <div class="house-info">
                                <img src="https://localhost:7134/Filesave/@listing.Profile.Pictures[0].Split('.')[0]/@listing.Profile.Pictures[0].Split('.')[1]" alt="House Picture" class="house-image"/>
                                <h2 class="listing-title"><a href="https://localhost:7262/view-listing/@listing.Id" target="_blank">@listing.Profile.Title</a></h2>
                                <p class="listing-dates">@listing.StartDate.ToShortDateString() - @listing.EndDate.ToShortDateString()</p>
                                <button @onclick="() => ShowConfirmationModal(listing.Id)" class="btn orange-button">
                                    Delete Listing
                                </button>
                            </div>
                            @if (_showConfirmationModal)
                            {
                            <div class="modal-background">
                                <div class="modal-content">
                                    <h3>Confirm Deletion</h3>
                                    <p>Are you sure you want to delete this listing? This action cannot be undone.</p>
                                    <button class="btn btn-danger" @onclick="() => ConfirmDelete(listing.Id)">Delete</button>
                                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                                </div>
                            </div>
                            }


                            <!-- Applicants Information -->
                            <div class="applicants-container">
                                <div class="applicants-scroll">
                                    @if (listing.Applications != null && listing.Applications.Any())
                                    {
                                        <h3>Applications for this listing:</h3>

                                        @foreach (var application in listing.Applications)
                                        {
                                            <div class="card @(application.Status is "Rejected" or "Canceled" ? "rejected" : (application.Status is "Approved" ? "green" : ""))">
                                                <div class="card-img-container">
                                                    <img src="https://localhost:7134/Filesave/@application.Sitter!.ProfilePicture!.Split('.')[0]/@application.Sitter.ProfilePicture.Split('.')[1]" alt="...">
                                                </div>

                                                <div class="card-body">
                                                    <div class="title-rating">
                                                        <a href="https://localhost:7262/view-sitter-profile/@application.SitterId" target="_blank"><h5>@application.Sitter.Name</h5></a>
                                                        <div class="stars">
                                                            @if (application.Sitter.Reviews != null && application.Sitter.Reviews.Any())
                                                            {
                                                                @foreach (var star in GetStars(application.Sitter.Reviews))
                                                                {
                                                                    <span class="@star"></span>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <div><span>No reviews</span></div>
                                                            }
                                                        </div>
                                                    </div>

                                                    <p class="card-text" style="font-style: italic">
                                                        @GetApplicationStatusText(application)
                                                    </p>

                                                    <p class="card-text"><small>@application.Date</small></p>

                                                    @if (!listing.Applications.Any(a => a.Status == "Confirmed" || a.Status == "Approved") && application.Status == "Pending")
                                                    {
                                                        <div class="card-buttons">
                                                            <Button Color="ButtonColor.Success" class="approve" @onclick="() => ApproveApplication(application)">Approve</Button>
                                                            <Button Color="ButtonColor.Danger" @onclick="() => RejectApplication(application)">Reject</Button>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <h3 class="">You have no applications for this listing</h3>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </Authorized>
    </AuthorizeView>

    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
</style>

@code {
    private List<HouseListingDto>? _houseListings;
    private int _userId;
    private bool _showConfirmationModal = false;
    private int? _listingToDelete = null;

    private void ShowConfirmationModal(int listingId)
    {
        _listingToDelete = listingId;
        _showConfirmationModal = true;
    }

    private void CancelDelete()
    {
        _showConfirmationModal = false;
        _listingToDelete = null;
    }
    private async Task ConfirmDelete(int listingId)
    {
        if (_listingToDelete.HasValue)
        {
            PreloadService.Show();
            await HouseListingService.DeleteAsync(listingId);
            _listingToDelete = null;
            _showConfirmationModal = false;
            await LoadUpcomingHouseListings();
            await LoadApplications();
            await InvokeAsync(StateHasChanged);
            PreloadService.Hide();
        }
    }
    private List<string> GetStars(List<SitterReviewDto>? reviews)
    {
        var stars = new List<string>();

        double averageRating = reviews.Select(r => r.Rating).Average();
        int fullStars = (int)Math.Floor(averageRating);
        bool hasHalfStar = (averageRating % 1 >= 0.5);
        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));

        if (hasHalfStar)
        {
            stars.Add("fa-solid fa-star-half-alt");
        }
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        _houseListings = new List<HouseListingDto>();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadUpcomingHouseListings();
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadUpcomingHouseListings()
    {
        var allListings = await Task.Run(() => HouseListingService.GetAllByOwnerStatus(_userId, "Open", true, true));
        var today = DateOnly.FromDateTime(DateTime.Today);

        _houseListings = allListings
            .Where(listing => listing.StartDate >= today)
            .ToList();
    }

    private async Task LoadApplications()
    {
        foreach (var listing in _houseListings)
        {
            listing.Applications = new();
            listing.Applications.AddRange(ApplicationService.GetApplicationsByListing(listing.Id, "Confirmed", true).ToList());
            listing.Applications.AddRange(ApplicationService.GetApplicationsByListing(listing.Id, "Approved", true).ToList());
            listing.Applications.AddRange(ApplicationService.GetApplicationsByListing(listing.Id, "Pending", true).ToList());
            listing.Applications.AddRange(ApplicationService.GetApplicationsByListing(listing.Id, "Rejected", true).ToList());

            foreach (var application in listing.Applications)
            {
                application.Sitter!.Reviews = SitterReviewService.GetAllReviewsForSitter(application.SitterId).ToList();
            }
        }
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    

    private async void ApproveApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Approved"
        };

        await ApplicationService.UpdateAsync(updatedApplication);
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
    }

    private async void RejectApplication(ApplicationDto application)
    {
        UpdateApplicationDto update = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Rejected"
        };

        await ApplicationService.UpdateAsync(update);
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
    }

    private string GetApplicationStatusText(ApplicationDto application)
    {
        return application.Status switch
        {
            "Pending" => application.Message,
            "Approved" => $"{application.Sitter.Name} has to confirm their stay.",
            "Rejected" => "You have rejected this applicant.",
            "Canceled" => $"{application.Sitter.Name} has canceled their stay.",
            _ => string.Empty
        };
    }
}
