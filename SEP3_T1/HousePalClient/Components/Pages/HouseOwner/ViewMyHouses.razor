@page "/view-my-houses"
@using System.Security.Claims
@using DTOs.HouseListing
@using DTOs.HouseProfile
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout;
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IHouseProfileService HouseProfileService
@inject IHouseListingService HouseListingService
@inject AuthenticationStateProvider AuthenticationStateProvider


<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
            <div class="page-container">
                <div class="signup-page-container">
                    <h1>My Houses</h1>

                    <div class="house-profile-list">
                        @if (houseProfiles == null || !houseProfiles.Any())
                        {
                            <p>No house profiles found.</p>
                        }
                        else
                        {
                            @foreach (var profile in houseProfiles)
                            {
                                <div class="house-profile-item">
                                    @if (profile.Pictures != null && profile.Pictures.Any())
                                    {
                                        <img src="https://localhost:7134/Filesave/@profile.Pictures[0].Split('.')[0]/@profile.Pictures[0].Split('.')[1]" alt="House Picture" class="house-profile-img"/>
                                    }
                                    <p><a href="https://localhost:7262/view-house-profile/@profile.Id" target="_blank">@profile.Title</a></p>
                                    <button type="button" class="btn btn-success" @onclick="() => ShowCreateListingConfirmation(profile.Id)">Create listing</button>
                                </div>
                            }
                        }
                        <div class="house-profile-item">
                            <div @onclick="NavigateToCreate" class="plus">
                                <i class="fa-solid fa-plus fa-2xl"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                @if (_showCreateListingMessage)
                {
                <div class="modal-background">
                    <div class="modal-content">
                        <button class="close-button" @onclick="CancelCreateListing"><i class="fa-solid fa-xmark"></i></button>

                        <h2>Create Listing</h2>

                        <form @onsubmit="CreateListingForProfile">
                        <div class="form-group date-group">
                            <label for="startDate">Start Date</label>
                            <input
                                type="date"
                                id="startDate"
                                class="form-control"
                                @bind-value="@StartDate"
                                min="@_minDateStart.ToString("yyyy-MM-dd")"
                                max="@_maxDateStart.ToString("yyyy-MM-dd")" 
                                required
                                />
                        </div>

                        <div class="form-group date-group">
                            <label for="endDate">End Date</label>
                            <input
                                type="date"
                                id="endDate"
                                class="form-control"
                                @bind-value="@EndDate"
                                min="@_minDateEnd.ToString("yyyy-MM-dd")"
                                max="@_maxDateEnd.ToString("yyyy-MM-dd")"
                                required
                                />
                        </div>

                        <button type="submit" class="btn btn-primary">Create</button>
                        </form>
                    </div>
                </div>
                }


                @if (_showSuccessMessage)
                {
                    <div class="modal-background">
                        <div class="modal-content">
                            <p>@_successMessage</p>
                            <button @onclick="HideSuccessMessage" class="btn btn-primary">Ok</button>
                        </div>
                    </div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<style>
    
    h2 {
        font-family: 'LogoFont', sans-serif;
        color: #ff7e5f;
    }
    
    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: #fff;
        padding: 2em;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
        width: 100%;
        font-family: 'FuturaFont', sans-serif;
    }

    .close-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #333;
        cursor: pointer;
    }

    .close-button:hover {
        color: #ff7e5f;
    }

    .form-group {
        margin-bottom: 1em;
        text-align: left;
    }

    .form-control {
        width: 100%;
        padding: 0.5em;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .form-control:focus {
        border-color: #ff7e5f;
        box-shadow: 0 0 5px rgba(255, 126, 95, 0.5);
    }

    .btn-primary {
        background-color: #ff7e5f;
        color: #fff;
        border: none;
        padding: 0.5em 1em;
        border-radius: 8px;
        font-size: 1rem;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #feb47b;
    }

    .house-profile-item p a {
        font-size: 1.5em; 
        color:  #3d3d3d;
        text-align: center;
        display: inline-block;
    }
    .house-profile-item p a:hover {
        color: blue;
    } 

    
    @@font-face {
        font-family: 'LogoFont';
        src: url('http://localhost:[puerto]/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    h1 {
        text-align: center;
        color: #ff7e5f;
        margin-bottom: 1em;
        font-family: 'LogoFont', sans-serif;
    }

    .btn {
        font-size: 0.85em;
        padding: 0.375em 0.75em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        cursor: pointer;
        border: none;
    }

    .btn:hover {
        background-color: #feb47b;
    }

    .house-profile-list {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5em;
        justify-content: center;
    }

    .house-profile-item {
        width: 15em;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 0 0 1em 0;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-item div {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 95%;
        height: 95%;
    }

    .house-profile-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 10px 10px 0 0;
        display: block;
    }

    p {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        margin: 1em;
    }

    .plus {
        cursor: pointer;
        min-height: 15em;
    }

    .not-authorized-container {
        text-align: center;
        margin-top: 5em;
        padding: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .not-authorized-container h2 {
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        font-size: 2em;
        margin-bottom: 0.5em;
    }

    .not-authorized-container p {
        font-family: 'FuturaFont', sans-serif;
        color: #333;
        font-size: 1.2em;
        margin-bottom: 1.5em;
    }

    .not-authorized-container .btn {
        font-size: 1em;
        padding: 0.75em 1.5em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .modal-background {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 4000;
        overflow: hidden;
    }

    .modal-content {
        margin-top: 1em;
        position: relative;
        background-color: #fff;
        padding: 2em;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 450px;
        width: 100%;
        z-index: 5000;

        max-height: 90vh;
        overflow-y: auto;
    }

</style>

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    private List<HouseProfileDto> houseProfiles = new();
    private int _userId;
    private bool _showCreateListingMessage;
    private bool _showSuccessMessage;
    private string _successMessage;
    private int _profileBeingUsed;
    private readonly DateTime _minDateStart = DateTime.Today;
    private readonly DateTime _maxDateStart = DateTime.Today.AddYears(5);
    private DateTime _minDateEnd = DateTime.Today;
    private DateTime _maxDateEnd = DateTime.Today.AddYears(5);
    private DateTime? _gottenStart;
    private DateTime? _gottenEnd;


    private DateTime? StartDate
    {
        get => _gottenStart;
        set
        {
            _gottenStart = value;
            if (value < DateTime.Today) _gottenStart = DateTime.Today;
            _minDateEnd = _gottenStart!.Value;
            if (_gottenEnd.HasValue && _gottenStart.HasValue && _gottenEnd < _gottenStart)
            {
                _gottenEnd = _gottenStart;
            }
        }
    }

    private DateTime? EndDate
    {
        get => _gottenEnd;
        set
        {
            _gottenEnd = value;
            if (value < _minDateEnd) _gottenEnd = _minDateEnd;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadAllHouseProfiles();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadAllHouseProfiles()
    {
        PreloadService.Show();
        houseProfiles = await Task.Run(() => HouseProfileService.GetAllByOwner(_userId).ToList());
        PreloadService.Hide();
    }

    private void ShowCreateListingConfirmation(int profileId)
    {
        _profileBeingUsed = profileId;
        _showCreateListingMessage = true;
        _showSuccessMessage = false;
    }

    private void CancelCreateListing()
    {
        _showCreateListingMessage = false;
        StateHasChanged(); 
    }

    private async void CreateListingForProfile()
    {
        CreateHouseListingDto listing = new CreateHouseListingDto
        {
            ProfileId = _profileBeingUsed,
            StartDate = DateOnly.FromDateTime(_gottenStart.Value),
            EndDate = DateOnly.FromDateTime(_gottenEnd.Value)
        };

        try
        {
            _showCreateListingMessage = false;
            await HouseListingService.AddAsync(listing);
            _successMessage = $"House Listing for Profile {houseProfiles.Find(p => p.Id == _profileBeingUsed).Title} successfully created.";
            _showSuccessMessage = true;
            await InvokeAsync(StateHasChanged);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.StackTrace);
        }
    }

    private void HideSuccessMessage()
    {
        _showSuccessMessage = false;
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/create-house-profile");
    }


    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}