@page "/view-my-houses"
@using System.Security.Claims
@using DTOs.HouseListing
@using DTOs.HouseProfile
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout;
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IHouseProfileService HouseProfileService
@inject IHouseListingService HouseListingService
@inject AuthenticationStateProvider AuthenticationStateProvider


<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
            <div class="page-container">
                <div class="myhouses-page-container">
                    <h1 class="subtitle">My Houses</h1>

                    <div class="house-profile-list">
                        @if (houseProfiles == null || !houseProfiles.Any())
                        {
                            <p>No house profiles found.</p>
                        }
                        else
                        {
                            @foreach (var profile in houseProfiles)
                            {
                                <div class="house-profile-item">
                                    @if (profile.Pictures != null && profile.Pictures.Any())
                                    {
                                        <img src="https://localhost:7134/Filesave/@profile.Pictures[0].Split('.')[0]/@profile.Pictures[0].Split('.')[1]" alt="House Picture" class="house-profile-img"/>
                                    }
                                    <p><a class="link-title" href="https://localhost:7262/view-house-profile/@profile.Id">@profile.Title</a></p>
                                    <button type="button" class="orange-button" @onclick="() => ShowCreateListingConfirmation(profile.Id)">Create listing</button>
                                </div>
                            }
                        }
                        <div class="house-profile-item">
                            <div @onclick="NavigateToCreate" class="plus">
                                <i class="fa-solid fa-plus fa-2xl"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div>
                @if (_showCreateListingMessage)
                {
                    <div class="modal-background">
                        <div class="modal-content">
                            <button class="close-button" @onclick="CancelCreateListing"><i class="fa-solid fa-xmark"></i></button>

                            <h2 class="subtitle">Create Listing</h2>

                            <div class="form-group date-group">
                                <label for="startDate">Start Date</label>
                                <input
                                    type="date"
                                    id="startDate"
                                    class="form-control"
                                    @bind-value="@StartDate"
                                    min="@_minDateStart.ToString("yyyy-MM-dd")"
                                    max="@_maxDateStart.ToString("yyyy-MM-dd")" />
                            </div>

                            <div class="form-group date-group">
                                <label for="endDate">End Date</label>
                                <input
                                    type="date"
                                    id="endDate"
                                    class="form-control"
                                    @bind-value="@EndDate"
                                    min="@_minDateEnd.ToString("yyyy-MM-dd")"
                                    max="@_maxDateEnd.ToString("yyyy-MM-dd")" />
                            </div>

                            <button class="orange-button" @onclick="CreateListingForProfile">Create</button>
                        </div>
                    </div>
                }


                @if (_showSuccessMessage)
                {
                    <div class="modal-background">
                        <div class="modal-content">
                            <p>@_successMessage</p>
                            <button @onclick="HideSuccessMessage" class="btn btn-primary">Ok</button>
                        </div>
                    </div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2 class="subtitle">You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
</style>

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    private List<HouseProfileDto> houseProfiles = new();
    private int _userId;
    private bool _showCreateListingMessage;
    private bool _showSuccessMessage;
    private string _successMessage;
    private int _profileBeingUsed;
    private readonly DateTime _minDateStart = DateTime.Today;
    private readonly DateTime _maxDateStart = DateTime.Today.AddYears(5);
    private DateTime _minDateEnd = DateTime.Today;
    private DateTime _maxDateEnd = DateTime.Today.AddYears(5);
    private DateTime? _gottenStart;
    private DateTime? _gottenEnd;


    private DateTime? StartDate
    {
        get => _gottenStart;
        set
        {
            _gottenStart = value;
            if (value < DateTime.Today) _gottenStart = DateTime.Today;
            _minDateEnd = _gottenStart!.Value;
            if (_gottenEnd.HasValue && _gottenStart.HasValue && _gottenEnd < _gottenStart)
            {
                _gottenEnd = _gottenStart;
            }
        }
    }

    private DateTime? EndDate
    {
        get => _gottenEnd;
        set
        {
            _gottenEnd = value;
            if (value < _minDateEnd) _gottenEnd = _minDateEnd;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadAllHouseProfiles();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadAllHouseProfiles()
    {
        houseProfiles = await Task.Run(() => HouseProfileService.GetAllByOwner(_userId).ToList());
    }

    private void ShowCreateListingConfirmation(int profileId)
    {
        _profileBeingUsed = profileId;
        _showCreateListingMessage = true;
        _showSuccessMessage = false;
    }

    private void CancelCreateListing()
    {
        _showCreateListingMessage = false;
        StateHasChanged(); 
    }

    private async void CreateListingForProfile()
    {
        CreateHouseListingDto listing = new CreateHouseListingDto
        {
            ProfileId = _profileBeingUsed,
            StartDate = DateOnly.FromDateTime(_gottenStart.Value),
            EndDate = DateOnly.FromDateTime(_gottenEnd.Value)
        };

        try
        {
            _showCreateListingMessage = false;
            await HouseListingService.AddAsync(listing);
            _successMessage = $"House Listing for Profile {houseProfiles.Find(p => p.Id == _profileBeingUsed).Title} successfully created.";
            _showSuccessMessage = true;
            await InvokeAsync(StateHasChanged);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.StackTrace);
        }
    }

    private void HideSuccessMessage()
    {
        _showSuccessMessage = false;
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/create-house-profile");
    }


    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}