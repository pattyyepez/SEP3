@using System.Net.Http.Headers
@using System.Security.Claims
@using DTOs
@using DTOs.HouseOwner
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseOwnerService HouseOwnerService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<EditHouseOwner> Logger
@inject HttpClient Http
@rendermode InteractiveServer
@page "/edit-account-owner"

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
            <div class="page-container">
                ,
                <div class="signup-page-container">
                    <h1>Update Your Account</h1>

                    <form class="house-owner-form" @onsubmit="EditOwner">

                        <!-- Personal Information Fields -->
                        <div class="form-section">
                            <h2>Personal Information</h2>

                            <label>Name:</label>
                            <input type="text" class="form-control" placeholder="Enter your name" @bind="_name" required/>

                            <label>CPR Number:</label>
                            <input type="text" class="form-control" placeholder="Enter your CPR number" @bind="_cpr" required/>

                            <label>Phone Number:</label>
                            <input type="tel" class="form-control" placeholder="Enter your phone number" @bind="_phone" required/>

                            <label>Home Address:</label>
                            <input type="text" class="form-control" placeholder="Enter your address" @bind="_address" required/>
                        </div>

                        <!-- Introduction Section -->
                        <div class="form-section">
                            <h2>Introduce Yourself</h2>

                            <label>Short Introduction:</label>
                            <textarea class="form-control" rows="4" placeholder="Write a brief introduction" @bind="_biography" required></textarea>
                            <label>Upload a Profile Picture:</label>
                            <InputFile OnChange="OnInputProfilePictureChange" accept="image/*" class="form-control"/>

                            @if (!string.IsNullOrEmpty(_profilePictureUrl))
                            {
                                <hr/>
                                <p>Uploaded picture:</p>
                                <img class="profile-picture" src="https://localhost:7134/Filesave/@_profilePictureUrl.Split('.')[0]/@_profilePictureUrl.Split('.')[1]" alt="Uploaded picture"/>
                            }
                        </div>

                        <!-- Display Message if exists -->
                        @if (!string.IsNullOrEmpty(_message))
                        {
                            <div class="alert alert-danger">@_message</div>
                        }

                        <!-- Submit Button -->
                        <div class="button-group">
                            <button type="submit" class="btn btn-primary">Update</button>
                            <button type="button" @onclick="OpenCancelModal" class="btn btn-secondary">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
            @if (_showSuccessMessage)
            {
                <div class="modal-background">
                    <div class="modal-content">
                        <h2>Hello, @_name!</h2>
                        <p>Your account has been updated successfully.</p>
                        <button @onclick="RedirectToHome" class="btn btn-primary">Go to Home</button>
                    </div>
                </div>
            }

            @if (_showCancelConfirmation)
            {
            <div class="modal-background">
                <div class="modal-content">
                    <h2>Confirmation</h2>
                    <p>Are you sure you want to cancel? All changes will be lost.</p>
                    <div class="modal-actions">
                        <button @onclick="ConfirmCancel" class="btn btn-primary">
                            Yes
                        </button>
                        <button @onclick="CloseCancelModal" class="btn btn-secondary">
                            No
                        </button>
                    </div>
                </div>
            </div>
            }
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<style>

    @@font-face {
        font-family: 'LogoFont';
        src: url(    'http://localhost:[puerto]/fonts/logo-font.ttf'
        ) format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .profile-picture {
        width: 150px;
        height: 150px;
        object-fit: cover;
        border-radius: 50%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .uploaded-images-container img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 5px;
        
    }
    .page-container
    {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
        box-sizing: border-box;
        background-color: white;
    }

    .signup-page-container {
        max-width: 50vw;
        margin: 3em 0 3em 0;
        padding: 2em 2em;
        background-color: #fff2ef;
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .signup-page-container h1 {
        font-size: 3em;
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        align-self: center;
        margin-bottom: 0.5em;
    }
    input[type="file"]::-webkit-file-upload-button {
        color: white;
        background-color: #ff7e5f;
        border: none;
        border-radius: 5px;
        padding: 0.5em 1em;
        font-family: 'FuturaFont', sans-serif;
        font-size: 1rem;
        cursor: pointer;
    }

    input[type="file"]::-webkit-file-upload-button:hover {
        background-color: #feb47b;
    }

    .form-section {
        margin-bottom: 2em;
        padding: 1em;
        border-radius: 10px;
        background-color: #ffe5df;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .form-section h2 {
        text-align: center;
        font-size: 2rem;
        color: #3d3d3d;
        font-family: 'FuturaFont', sans-serif;
        font-weight: bold;
        margin: 0;
    }

    .form-section label
    {
        color: #3d3d3d;
        font-family: 'FuturaFont', sans-serif;
        margin-bottom: 0.1em;
    }

    .btn {
        font-size: 1rem;
        padding: 0.375em 0.75em;
        font-family: 'FuturaFont', sans-serif !important;
    }

    .form-control {
        width: 100%;
        padding: 0.75em;
        margin-top: 0.5em;
        margin-bottom: 1.5em;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
        background-color: #fff2ef;

    }

    input
    {
        font-family: 'FuturaFont', sans-serif !important;
    }

    textarea{
        resize: vertical;
        font-family: 'FuturaFont', sans-serif !important;
    }

    .btn-primary {
        display: block;
        width: 100%;
        padding: 0.75em;
        font-size: 1.2rem;
        background-color: #ff7e5f;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'FuturaFont', sans-serif;
    }

    .btn-primary:hover {
        background-color: #feb47b;
    }
    input
    {
        font-family: 'FuturaFont', sans-serif;
        background-color: #fff2ef;

    }

    textarea .form-control {
        resize: vertical;
        font-family: 'FuturaFont', sans-serif;
    }

    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        overflow: hidden;
    }

    .modal-content {
        background-color: #fff;
        padding: 2em;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
        width: 100%;
    }

    .not-authorized-container {
        text-align: center;
        margin-top: 5em;
        padding: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .not-authorized-container h2 {
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        font-size: 2em;
        margin-bottom: 0.5em;
    }

    .not-authorized-container p {
        font-family: 'FuturaFont', sans-serif;
        color: #333;
        font-size: 1.2em;
        margin-bottom: 1.5em;
    }

    .not-authorized-container .btn {
        font-size: 1em;
        padding: 0.75em 1.5em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;

    }

    .not-authorized-container .btn:hover {
        background-color: #feb47b;
    }

    .alert {
        padding: 1em;
        margin-bottom: 1em;
        border: 1px solid transparent;
        border-radius: 0.375em;
        font-family: 'FuturaFont', sans-serif;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
</style>

@code {
    private int _userId;

    private string _name = string.Empty;
    private string _cpr = string.Empty;
    private string _phone = string.Empty;

    private string _address = string.Empty;
    private string _biography = string.Empty;

    private string _message = string.Empty;
    private string _profilePictureUrl = string.Empty;
    private bool _showSuccessMessage;

    private List<FileDto> _uploadResults = new();
    private bool _showCancelConfirmation;
    
    private void RedirectToHome()
    {
        Navigation.NavigateTo("/view-my-houses");
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    
    private void OpenCancelModal()
    {
        _showCancelConfirmation = true;
    }

    private void CloseCancelModal()
    {
        _showCancelConfirmation = false;
    }

    private void ConfirmCancel()
    {
        _name = string.Empty;
        _cpr = string.Empty;
        _phone = string.Empty;
        _address = string.Empty;
        _biography = string.Empty;
        _message = string.Empty;
        _profilePictureUrl = string.Empty;

        _showSuccessMessage = false;

        _showCancelConfirmation = false;
        Navigation.NavigateTo("/view-my-account");
    }

    private async Task EditOwner()
    {
        _message = string.Empty;

        var updateHouseOwnerDto = new UpdateHouseOwnerDto()
        {
            UserId = _userId,
            Name = _name,
            ProfilePicture = _profilePictureUrl,
            CPR = _cpr,
            Phone = _phone,
            Address = _address,
            Biography = _biography
        };

        try
        {
            await HouseOwnerService.UpdateAsync(updateHouseOwnerDto);
            _showSuccessMessage = true;
            _message = $"House Owner updated successfully!";
        }
        catch (Exception e)
        {
            var message = e.Message.Split('"').Length == 3 ? e.Message.Split('"')[1] : e.Message.Split('"')[4];
            _message = message.Remove(message.Length);
        }
    }

    private async Task OnInputProfilePictureChange(InputFileChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(_profilePictureUrl))
            await Http.DeleteAsync($"/Filesave/{_profilePictureUrl.Split('.')[0]}/{_profilePictureUrl.Split('.')[1]}");

        long maxFileSize = long.MaxValue;
        var upload = false;

        using var content = new MultipartFormDataContent();

        var file = e.GetMultipleFiles(1).FirstOrDefault();
        if (_uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType =
                    new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                Logger.LogInformation(
                    $"{file.Name} not uploaded (Err: 6): {ex.Message}",
                    file.Name, ex.Message);

                _uploadResults.Add(
                    new()
                    {
                        FileName = file.Name,
                        ErrorCode = 6,
                        Uploaded = false
                    });
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/Filesave", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<FileDto>>();

            if (newUploadResults is not null)
            {
                _profilePictureUrl = newUploadResults.FirstOrDefault()!.StoredFileName!;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("HouseOwner"))
            {
                var ownerIdClaim = user.FindFirst("Id")?.Value;
                if (ownerIdClaim != null && int.TryParse(ownerIdClaim, out var ownerId))
                {
                    var owner = await HouseOwnerService.GetSingleAsync(ownerId);
                    _cpr = owner.CPR;
                    _phone = owner.Phone;
                    _name = owner.Name;
                    _biography = owner.Biography;
                    _profilePictureUrl = owner.ProfilePicture;
                    _address = owner.Address;
                    _userId = ownerId;
                }
            }
        }
        else
        {
            Console.WriteLine("User is NOT authenticated.");
        }
    }

}