@page "/view-house-profile/{profileId:int}"
@using System.Security.Claims
@using DTOs.HouseProfile
@using DTOs.HouseReview
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseProfileService HouseProfileService
@inject AuthenticationStateProvider AuthState
@rendermode InteractiveServer

<head>
    <title>View House Profile</title>
    @* <!-- Add Font Awesome CDN to your head tag --> *@
    @* <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"> *@
    @* <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet"> *@
    @* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script> *@
</head>


<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
            <div class="profile-container">
                @if (_houseProfile == null)
                {
                    <p>Loading house profile details...</p>
                }
                else
                {
                    <!-- Confirmation Modal -->
                    @if (_showConfirmationModal)
                    {
                        <div class="modal-background">
                            <div class="modal-content">
                                <h3 class="house-sections">Confirm Deletion</h3>
                                <p>Are you sure you want to delete this house profile? This action cannot be undone.</p>
                                <div class="button-group">
                                    <button class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                                </div>
                                
                            </div>
                        </div>
                    }

                    <!-- Success Message -->
                    @if (_showSuccessMessage)
                    {
                        <div class="alert alert-success" role="alert">
                            <strong>Success!</strong> The house profile has been deleted.
                            <button type="button" class="btn-close" aria-label="Close" @onclick="HideSuccessMessage"></button>
                        </div>
                    }

                    <!-- Top Buttons -->
                    <div class="top-buttons">
                        <button type="button" class="orange-button" @onclick="() => EditHouseProfile(_houseProfile.Id)">
                            <i class="fa-solid fa-pen"></i> Edit
                        </button>
                        <button type="button" class="orange-button" @onclick="ShowConfirmationModal">
                            <i class="fa-solid fa-trash"></i> Delete
                        </button>
                    </div>

                    <hr class="section-divider"/>

                    <div class="container house-profile">
                        <!-- Carousel Section -->
                        <div class="carousel-container">
                            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-indicators">
                                    @for (int i = 0; i < _houseProfile.Pictures!.Count; i++)
                                    {
                                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                                class="@(i == 0 ? "active" : "")"
                                                aria-current="@(i == 0 ? "true" : "false")"
                                                aria-label="Slide @i">
                                        </button>
                                    }
                                </div>
                                <div class="carousel-inner">
                                    @foreach (var image in _houseProfile.Pictures!)
                                    {
                                        <div class="carousel-item @(_houseProfile.Pictures!.IndexOf(image) == 0 ? "active" : "")">
                                            <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Image">
                                        </div>
                                    }
                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            </div>
                        </div>

                        <!-- House Title and Location -->
                        <h1 class="house-title">@_houseProfile.Title</h1>
                        <h2 class="house-location"><i class="fa-solid fa-location-dot" style="color: #ff7e5f;"></i> @_houseProfile.City, @_houseProfile.Region</h2>
                        <p class="house-description">@_houseProfile.Description</p>

                        <hr class="section-divider"/>

                        <!-- House Chores & Amenities Section -->
                        <div class="chores-amenities-row">
                            <div class="chores-column">
                                <h3 class="house-sections">House Chores</h3>
                                <div class="chores-container">
                                    @foreach (var chore in _houseProfile.Chores)
                                    {
                                        <div class="pill">@chore</div>
                                    }
                                </div>
                            </div>
                            <div class="vertical-divider"></div>
                            <div class="amenities-column">
                                <h3 class="house-sections">House Amenities</h3>
                                <div class="amenities-container">
                                    @foreach (var amenity in _houseProfile.Amenities)
                                    {
                                        <div class="pill">@amenity</div>
                                    }
                                </div>
                            </div>
                        </div>

                        <hr class="section-divider"/>

                        <!-- House Rules Section -->
                        <h3 class="house-sections">House Rules</h3>
                        <ol class="house-rules">
                            @foreach (var rule in _houseProfile.Rules)
                            {
                                <li>@rule</li>
                            }
                        </ol>

                        <hr class="section-divider"/>

                        <!-- Meet the Host Section -->
                        <h3 class="house-sections">Meet the Host</h3>
                        <div class="host-section">
                            <img src="https://localhost:7134/Filesave/@_houseProfile.Owner.ProfilePicture.Split('.')[0]/@_houseProfile.Owner.ProfilePicture.Split('.')[1]" alt="Host Profile Picture" class="host-picture"/>
                            <p class="host-bio">@_houseProfile.Owner.Biography</p>
                        </div>

                        <hr class="section-divider"/>


                        <!-- Review section -->

                        <div class="house-average">
                            <h3 class="house-sections">House Rating:</h3>
                            <div class="average-stars">
                                @foreach (var star in GetHouseAverage().Stars)
                                {
                                    <span class="@star"></span>
                                }
                            </div>
                        </div>


                        <div>
                            @if (_houseProfile.Reviews != null && _houseProfile.Reviews.Any())
                            {
                                <div class="reviews-section">
                                    <div class="reviews-container">
                                        @foreach (var review in _houseProfile.Reviews)
                                        {
                                            <div class="card">
                                                <div class="card-img-container">
                                                    <img src="https://localhost:7134/Filesave/@review.Sitter!.ProfilePicture.Split('.')[0]/@review.Sitter.ProfilePicture.Split('.')[1]"
                                                         class="card-img" alt="Reviewer Profile Picture">
                                                </div>

                                                <div class="card-body">
                                                    <div class="title-rating">
                                                        <h5>@review.Sitter.Name</h5>
                                                        <div class="stars">
                                                            @foreach (var star in GetStars(review))
                                                            {
                                                                <span class="@star"></span>
                                                            }
                                                        </div>
                                                    </div>

                                                    <p class="card-text">@review.Comment</p>
                                                    <p class="card-text">
                                                        <small class="text-muted">@review.Date</small>
                                                    </p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>

                    </div>
                }
            </div>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2 class="subtitle">You must be logged in to view this page.</h2>
                <p>Please log in to view this house profile.</p>
                <button class="orange-button" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
</style>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;

    [Parameter] public int ProfileId { get; set; }

    private HouseProfileDto? _houseProfile;
    private bool _showConfirmationModal;
    private bool _showSuccessMessage;

    private (double Average, List<string> Stars) GetHouseAverage()
    {
        if (_houseProfile?.Reviews == null || !_houseProfile.Reviews.Any())
        {
            return (0, new List<string> { "fa-regular fa-star", "fa-regular fa-star", "fa-regular fa-star", "fa-regular fa-star", "fa-regular fa-star" });
        }

        double averageRating = _houseProfile.Reviews.Average(r => r.Rating);

        int fullStars = (int)Math.Floor(averageRating);
        bool hasHalfStar = (averageRating % 1 >= 0.5);
        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        var stars = new List<string>();
        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        if (hasHalfStar)
        {
            stars.Add("fa-solid fa-star-half-alt");
        }

        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return (averageRating, stars);
    }

    private void ShowConfirmationModal()
    {
        _showConfirmationModal = true;
    }

    private void CancelDelete()
    {
        _showConfirmationModal = false;
    }

    private async Task ConfirmDelete()
    {
        if (_houseProfile != null)
        {
            try
            {
                await HouseProfileService.DeleteAsync(_houseProfile.Id);
                _showConfirmationModal = false;
                _showSuccessMessage = true;
                Navigation.NavigateTo("/view-my-houses");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting house profile: {ex.Message}");
            }
        }
    }

    private void HideSuccessMessage()
    {
        _showSuccessMessage = false;
        Navigation.NavigateTo("/view-my-houses");
    }


    private void EditHouseProfile(int profileId)
    {
        Navigation.NavigateTo($"/edit-house-profile/{profileId}");
    }

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthState
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        var userId = int.Parse(claims.Single(c => c.Type == "Id").Value);
        await LoadHouseProfile();
        if (userId != _houseProfile.OwnerId)
            Navigation.NavigateTo("/view-my-houses");
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadHouseProfile()
    {
        PreloadService.Show();
        _houseProfile = await HouseProfileService.GetDetailed(ProfileId);
        PreloadService.Hide();
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private List<string> GetStars(HouseReviewDto? review)
    {
        var stars = new List<string>();

        int fullStars = review.Rating;
        int emptyStars = 5 - fullStars;

        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }

}