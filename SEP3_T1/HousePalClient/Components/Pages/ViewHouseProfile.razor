@page "/view-house-profile/{profileId:int}"
@using DTOs.HouseProfile
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseProfileService HouseProfileService
@inject IHouseReviewService HouseReviewService
@rendermode InteractiveServer

@attribute [Authorize(Roles = "HouseOwner")]

<head>
    <!-- Add Font Awesome CDN to your head tag -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</head>


<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
<div class="profile-container">
    @if (_houseProfile == null)
    {
        <p>Loading house profile details...</p>
    }
    else
    { 
        <div class="container house-profile">
            <!-- Carousel Section -->
            <div class="carousel-container">
                <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                        @for (int i = 0; i < _houseProfile.Pictures!.Count; i++)
                        {
                            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                    class="@(i == 0 ? "active" : "")"
                                    aria-current="@(i == 0 ? "true" : "false")"
                                    aria-label="Slide @i"></button>
                        }
                    </div>
                    <div class="carousel-inner">
                        @foreach (var image in _houseProfile.Pictures!)
                        {
                            <div class="carousel-item @(_houseProfile.Pictures!.IndexOf(image) == 0 ? "active" : "")">
                                <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Image">
                            </div>
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
        
            <!-- House Title and Location -->
        <h1 class="house-title">@_houseProfile.Title</h1>
        <h2 class="house-location"><i class="fa-solid fa-location-dot" style="color: #ff7e5f;"></i> @_houseProfile.City, @_houseProfile.Region</h2>
        <p class="house-description">@_houseProfile.Description</p>
        
            <hr class="section-divider"/>
        
            <!-- House Chores & Amenities Section -->
        <div class="chores-amenities-row">
        <div class="chores-column">
        <h3>House Chores</h3>
        <div class="chores-container">
            @foreach (var chore in _houseProfile.Chores)
            {
                <div class="pill">@chore</div>
            }
        </div>
        </div>
        <div class="vertical-divider"></div>
        <div class="amenities-column">
            <h3>House Amenities</h3>
            <div class="amenities-container">
                @foreach (var amenity in _houseProfile.Amenities)
                {
                    <div class="pill">@amenity</div>
                }
            </div>
        </div>
        </div>
        
            <hr class="section-divider"/>
        
        <!-- House Rules Section -->
        <h3>House Rules</h3>
        <ol class="house-rules">
            @foreach (var rule in _houseProfile.Rules)
            {
                <li>@rule</li>
            }
        </ol>
        
            <hr class="section-divider"/>
        
            <!-- Meet the Host Section -->
            <h3>Meet the Host</h3>
            <div class="host-section">
                <img src="https://localhost:7134/Filesave/@_houseProfile.Owner.ProfilePicture.Split('.')[0]/@_houseProfile.Owner.ProfilePicture.Split('.')[1]" alt="Host Profile Picture" class="host-picture"/>
                <p class="host-bio">@_houseProfile.Owner.Biography</p>
            </div>
        
            <hr class="section-divider"/>
        
            <!-- Buttons Section -->
            <div class="action-buttons">
                <button type="button" class="btn btn-primary" @onclick="() => EditHouseProfile(_houseProfile.Id)">Edit House Profile</button>
                <button type="button" class="btn btn-secondary" @onclick="ShowConfirmation">Delete House Profile</button>
            </div>

            <hr class="section-divider"/>

            <div>
                @if (_houseProfile.Reviews!.Any())
                {
                    @foreach (var review in _houseProfile.Reviews!)
                    {
                        <div>
                            <p>@review.Sitter!.Name - @review.Date</p>
                            <p>@review.Rating</p>
                            <p>@review.Comment</p>
                        </div>
                    }
                }
                else
                {
                    <p>No reviews</p>
                }

            </div>

            <div>
                @if (_showConfirmationMessage)
                {
                <div class="modal-background">
                    <div class="modal-content">
                        <h3>Are you sure?</h3>
                        <p>Do you really want to delete this house profile? This action cannot be undone.</p>
                        <button class="btn btn-danger" @onclick="DeleteHouseProfile">Yes</button>
                        <button class="btn btn-secondary" @onclick="CancelDelete">No</button>
                    </div>
                </div>
                }

                @if (_showSuccessMessage)
                {
                <div class="alert alert-success" role="alert">
                    The house profile has been deleted successfully!
                </div>
                }
</div>
        </div>
    }
</div>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in to view this house profile.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
<style>

    @@font-face {
        font-family: 'LogoFont';
        src: url('fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    
    h3 {
        font-family: 'LogoFont', sans-serif;
        color: #3d3d3d;
    }

    .carousel-container {
        margin-bottom: 2em;
    }

    .host-section {
        display: flex;
        align-items: center;
        gap: 1.5em;
    }

    .host-picture {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
    }

    .host-bio {
        flex: 1;
        font-size: 1rem;
        color: #333;
        line-height: 1.6;
    }
    
    .carousel img { 
        max-height: 32em; 
        object-fit: cover; 
        border-radius: 10px; 
    } 
    
    .profile-container{
        padding: 0.85em;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .house-title {
        font-size: 2.5rem;
        color: #333;
        margin-bottom: 0.5em;
        font-family: 'LogoFont', sans-serif;
    }

    .house-location {
        font-size: 1.25rem;
        color: #3d3d3d;
        margin-bottom: 1em;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-description {
        font-size: 1rem;
        color: #3d3d3d;
        margin-bottom: 1.5em;
        font-family: 'FuturaFont', sans-serif;
    }

    .section-divider {
        margin: 2em 0;
        border: 0;
        height: 1px;
        background-color: #ddd;
    }

    .chores-amenities-row {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        gap: 1em;
        font-family: 'FuturaFont', sans-serif;
    }

    .chores-column, .amenities-column {
        flex: 1;
    }

    .chores-container, .amenities-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1em;
        margin-top: 1em;
    }

    .pill {
        background-color: #ff7e5f;
        color: white;
        padding: 0.5em 1em;
        border-radius: 50px;
        font-size: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: 'FuturaFont', sans-serif;
    }

    .vertical-divider {
        width: 1px;
        background-color: #ddd;
        height: auto;
        margin: 0 1em;
    }

    .house-rules {
        list-style: decimal inside;
        font-size: 1rem;
        color: #3d3d3d;
        line-height: 1.8;
        margin: 1em 0;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-rules li {
        margin-bottom: 0.5em;
    }

    .action-buttons {
        margin-top: 2em;
        display: flex;
        gap: 2em;
        justify-content: center;
    }
    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        width: 300px;
    }
    .modal-content button {
        margin: 10px; 
    }

    .not-authorized-container {
        text-align: center;
        margin-top: 5em;
        padding: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .not-authorized-container h2 {
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        font-size: 2em;
        margin-bottom: 0.5em;
    }

    .not-authorized-container p {
        font-family: 'FuturaFont', sans-serif;
        color: #333;
        font-size: 1.2em;
        margin-bottom: 1.5em;
    }

    .not-authorized-container .btn {
        font-size: 1em;
        padding: 0.75em 1.5em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;

    }

    .not-authorized-container .btn:hover {
        background-color: #feb47b;
    }
</style>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;
    
    [Parameter] public int ProfileId { get; set; } 

    private HouseProfileDto? _houseProfile;
    private bool _showConfirmationMessage;
    private bool _showSuccessMessage;

    private void EditHouseProfile(int profileId)
    {
        Navigation.NavigateTo($"/edit-house-profile/{profileId}");
    }

    private void ShowConfirmation()
    {
        _showConfirmationMessage = true;
        _showSuccessMessage = false;
    }

    private async Task DeleteHouseProfile()
    {
        if (_houseProfile != null)
        {
            _showConfirmationMessage = false;
            await HouseProfileService.DeleteAsync(_houseProfile.Id);
            _showSuccessMessage = true;
            await Task.Delay(2000); 
            Navigation.NavigateTo("/view-all-house-profiles");
        }
    }
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    private void CancelDelete()
    {
        _showConfirmationMessage = false;
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        await LoadHouseProfile();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadHouseProfile()
    {
        _houseProfile = await HouseProfileService.GetSingleAsync(ProfileId, true);
        _houseProfile.Reviews = HouseReviewService.GetAllReviewsForProfile(ProfileId).ToList();
    }
}
