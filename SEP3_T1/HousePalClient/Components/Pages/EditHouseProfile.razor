@page "/edit-house-profile/{profileId}"
@using System.Net.Http.Headers
@using DTOs
@using DTOs.HouseProfile
@using HousePalClient.Components.Layout
@using Microsoft.AspNetCore.Components
@using Services
@using Microsoft.AspNetCore.Mvc.Rendering
@layout LoginLayout
@inject NavigationManager Navigation
@inject IHouseProfileService HouseProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<FileUploadTest> Logger
@inject HttpClient Http
@rendermode InteractiveServer

<div class="page-container">
    <div class="signup-page-container">
        <h1>Edit House Profile</h1>

        <form class="house-profile-form" @onsubmit="CreateProfile">
            <!-- House Profile Information Fields -->
            <div class="form-section">
                <h2>House Information</h2>

                <label>Title:</label>
                <input type="text" class="form-control" placeholder="Enter title" @bind="_title" required/>

                <label>Description:</label>
                <textarea class="form-control" rows="4" placeholder="Describe your house" @bind="_description" required></textarea>

                <label>City:</label>
                <input type="text" class="form-control" placeholder="Enter city" @bind="_city" required/>

                <label>Region:</label>
                <input type="text" class="form-control" placeholder="Enter region" @bind="_region" required/>

                <label>Address:</label>
                <input type="text" class="form-control" placeholder="Enter address" @bind="_address" required/>
            </div>

            <!-- Amenities, Chores, and Rules Section -->
            <div class="form-section">
                <h2>Details</h2>

                <h3>Amenities:</h3>
                @if (_amenities is not null)
                {
                    <ul>
                        @foreach (var amenity in _amenities)
                        {
                            <li>
                                <input type="checkbox" @bind="amenity.Selected"/>
                                <label>@amenity.Text</label>
                            </li>
                        }
                    </ul>
                }


                <h3>Chores:</h3>
                @if (_chores is not null)
                {
                    <ul>
                        @foreach (var chore in _chores)
                        {
                            <li>
                                <input type="checkbox" @bind="chore.Selected"/>
                                <label>@chore.Text</label>
                            </li>
                        }
                    </ul>
                }

                <h3>Rules:</h3>
                @if (_rules is not null)
                {
                    <ul>
                        @foreach (var rule in _rules)
                        {
                            <li>
                                <input type="checkbox" @bind="rule.Selected"/>
                                <label>@rule.Text</label>
                            </li>
                        }
                    </ul>
                }
            </div>

            <!-- Upload Pictures Section -->
            <div class="form-section">
                <h2>Upload Pictures</h2>

                <label>Upload At Least 3 Pictures:</label>
                <InputFile OnChange="OnInputFileChange" accept="image/*" class="form-control" multiple/>
            </div>

            <!-- Display Message if exists -->
            @if (!string.IsNullOrEmpty(_message))
            {
                <div>
                    <label>@_message</label>
                </div>
            }

            <!-- Submit Button -->
            <button type="button" @onclick="CreateProfile" class="btn btn-primary">Create House Profile</button>
        </form>
    </div>
</div>

@if (_showSuccessMessage)
{
    <div class="modal-background">
        <div class="modal-content">
            <h2>Profile Created!</h2>
            <p> @_name, your house profile has been created successfully.</p>
            <button @onclick="RedirectToHome" class="btn btn-primary">Go to Home</button>
        </div>
    </div>
}

@functions
{
    [Parameter] public string? profileId { get; set; }
}

@code {
    private string _title = string.Empty;
    private string _description = string.Empty;
    private string _city = string.Empty;
    private string _region = string.Empty;
    private string _address = string.Empty;
    private List<string> _pictures = [];
    private string _message = string.Empty;
    private bool _showSuccessMessage = false;
    private string _name = string.Empty;
    private int _houseOwnerId = 0;
    private MultiSelectList? _amenities = null;
    private MultiSelectList? _chores = null;
    private MultiSelectList? _rules = null;
    
    private List<FileDto> _uploadResults = new();
    private int maxAllowedFiles = 3;

    private void RedirectToHome()
    {
        Navigation.NavigateTo("/");
    }

    private async Task CreateProfile()
    {
        _message = string.Empty;

        var updateProfile = new UpdateHouseProfileDto()
        {
            Id = int.Parse(profileId),
            Title = _title,
            Description = _description,
            City = _city,
            Region = _region,
            Address = _address,
            Pictures = _pictures
        };

        updateProfile.Chores = [];
        foreach (var chore in _chores!)
        {
            if (chore.Selected)
            {
                updateProfile.Chores.Add(chore.Text);
            }
        }

        updateProfile.Rules = [];
        foreach (var rule in _rules!)
        {
            if (rule.Selected)
            {
                updateProfile.Rules.Add(rule.Text);
            }
        }

        updateProfile.Amenities = [];
        foreach (var amenity in _amenities!)
        {
            if (amenity.Selected)
            {
                updateProfile.Amenities.Add(amenity.Text);
            }
        }

        try
        {
            await HouseProfileService.UpdateAsync(updateProfile);
            _showSuccessMessage = true;
            _message = "House Profile created successfully!";
        }
        catch (Exception e)
        {
            _message = $"Error: {e.Message}";
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var fileToDelete in _pictures)
        {
            await Http.DeleteAsync($"/Filesave/{fileToDelete.Split('.')[0]}/{fileToDelete.Split('.')[1]}");
        }
        
        _pictures = [];
        long maxFileSize = long.MaxValue;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (_uploadResults.SingleOrDefault(
                    f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        $"{file.Name} not uploaded (Err: 6): {ex.Message}",
                        file.Name, ex.Message);

                    _uploadResults.Add(
                        new()
                        {
                            FileName = file.Name,
                            ErrorCode = 6,
                            Uploaded = false
                        });
                }
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/Filesave", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<FileDto>>();

            if (newUploadResults is not null)
            {
                _uploadResults = _uploadResults.Concat(newUploadResults).ToList();
                _pictures.AddRange(newUploadResults.Select(p => p.StoredFileName!).ToList());
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _amenities = new MultiSelectList(HouseProfileService.GetAllAmenities());
        _chores = new MultiSelectList(HouseProfileService.GetAllChores());
        _rules = new MultiSelectList(HouseProfileService.GetAllRules());
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated && profileId != null)
        {
            var profile = await HouseProfileService.GetSingleAsync(int.Parse(profileId), false);
            _houseOwnerId = profile.OwnerId;
            _title = profile.Title;
            _description = profile.Description;
            _city = profile.City;
            _region = profile.Region;
            _address = profile.Address;
            _pictures = profile.Pictures;
            
            foreach (var rule in _rules)
            {
                if (profile.Rules.Contains(rule.Text))
                {
                    rule.Selected = true;
                }
            }
            
            foreach (var chore in _chores)
            {
                if (profile.Chores.Contains(chore.Text))
                {
                    chore.Selected = true;
                }
            }
            
            foreach (var amenity in _amenities)
            {
                if (profile.Amenities.Contains(amenity.Text))
                {
                    amenity.Selected = true;
                }
            }
        }
        else
        {
            Console.WriteLine("User is NOT authenticated.");
        }
        
        await InvokeAsync(StateHasChanged);
    }

}