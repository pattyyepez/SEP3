@using DTOs.HouseOwner
@using HousePalClient.Components.Layout
@using Microsoft.AspNetCore.Components
@using Services
@layout LoginLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IHouseOwnerService HouseOwnerService
@page "/house-owner-signup"


<div class="page-container">
    <div class="signup-page-container">
        <h1>Create Your House Owner Account</h1>

        <form class="house-owner-form" @onsubmit="CreateOwner">
            <!-- Account Information Fields -->
            <div class="form-section">
                <h2>Account Information</h2>

                <label>Email:</label>
                <input type="email" class="form-control" placeholder="Enter your email" @bind="email" required/>

                <label>Password:</label>
                <input type="password" class="form-control" placeholder="Create a password" @bind="password" required/>

                <label>Confirm Password:</label>
                <input type="password" class="form-control" placeholder="Confirm your password" @bind="confirmPassword" required/>
            </div>

            <!-- Personal Information Fields -->
            <div class="form-section">
                <h2>Personal Information</h2>

                <!--   <label>First Name:</label>
                   <input type="text" class="form-control" placeholder="Enter your first name" @bind="name" required /> -->
                <label>Name:</label>
                <input type="text" class="form-control" placeholder="Enter your name" @bind="name" required/>

                <label>CPR Number:</label>
                <input type="text" class="form-control" placeholder="Enter your CPR number" @bind="cpr" required/>

                <label>Phone Number:</label>
                <input type="tel" class="form-control" placeholder="Enter your phone number" @bind="phone" required/>

                <label>Home Address:</label>
                <input type="text" class="form-control" placeholder="Enter your home address" @bind="address" required/>
            </div>

            <!-- Introduction Section -->
            <div class="form-section">
                <h2>Introduce Yourself</h2>

                <label>Short Introduction:</label>
                <textarea class="form-control" rows="4" placeholder="Write a brief introduction" @bind="biography" required></textarea>
                <label>Upload Profile Pictures:</label>
                <InputFile OnChange="HandleFileSelected" accept="image/*" class="form-control"/>

            </div>

            <!-- Display Message if exists -->
            @if (!string.IsNullOrEmpty(message))
            {
                <div>
                    <label>@message</label>
                </div>
            }

            <!-- Submit Button -->
            <button type="button" @onclick="CreateOwner" class="btn btn-primary">Create Account</button>
        </form>
    </div>
</div>
@if (showSuccessMessage)
{
    <div class="modal-background">
        <div class="modal-content">
            <h2>Hello, @name!</h2>
            <p>Your account has been created successfully.</p>
            <button @onclick="RedirectToLogin" class="btn btn-primary">Go to Login</button>
        </div>
    </div>
}


<style>

    @@font-face {
        font-family: 'LogoFont';
        src: url('/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .page-container
    {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-height: 100vh;
        min-width: 100vw;
        background: linear-gradient(150deg, #ff7e5f, #feb47b);

    }

    .signup-page-container {
        max-width: 800px;
        margin: 63em 0 3em 0;
        padding: 2em 2em;
        background-color: #ffffff;
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        color: #ff7e5f;
        margin-bottom: 1em;
        font-family: 'LogoFont', sans-serif;
    }

    h2 {
        text-align: center;
        color: #3d3d3d;
        font-family: Futura;
        font-size: 1.7rem;
    }

    .form-section {
        margin-bottom: 2em;
        padding: 1em;
        border-radius: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .form-control {
        width: 100%;
        padding: 0.75em;
        margin-top: 0.5em;
        margin-bottom: 1.5em;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
    }

    input
    {
        font-family: Futura;
    }

    label
    {
        font-family: Futura;
        color: #3d3d3d;
    }

    textarea.form-control {
        resize: vertical;
        font-family: Futura;
    }

    .btn-primary {
        display: block;
        width: 100%;
        padding: 0.75em;
        font-size: 1.2rem;
        background-color: #ff7e5f;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-family: Futura;
    }

    .btn-primary:hover {
        background-color: #feb47b;
    }
    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        overflow: hidden; 
    }

    .modal-content {
        background-color: #fff;
        padding: 2em;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
        width: 100%;
    }


</style>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string name = string.Empty;
    private string cpr = string.Empty;
    private string phone = string.Empty;
    private string address = string.Empty;
    private string biography = string.Empty;
    private string message = string.Empty;
    private string profilePictureUrl = string.Empty;
    private bool showSuccessMessage = false;

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/");
    }

    private async Task CreateOwner()
    {
        message = string.Empty;

        if (password != confirmPassword)
        {
            message = "Passwords do not match";
            return;
        }

        var createHouseOwnerDto = new CreateHouseOwnerDto
        {
            Name = name,
            Email = email,
            Password = password,
            ProfilePicture = profilePictureUrl,
            CPR = cpr,
            Phone = phone,
            Address = address,
            Biography = biography
        };

        try
        {
            HouseOwnerDto created = await HouseOwnerService.AddAsync(createHouseOwnerDto);
            showSuccessMessage = true;
            message = $"House Owner created successfully!";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            message = $"Error: {e.Message}";
        }
    }


    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var uploadedFileUrl = await UploadProfilePicture(file);
            profilePictureUrl = uploadedFileUrl;
        }
    }

    private async Task<string> UploadProfilePicture(IBrowserFile file)
    {
// converting to bytes
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

// saving
        string imageUrl = file.Name;
//string imageUrl = "/path/to/images/" + file.Name; 
        return imageUrl;
    }

}

}