@page "/view-house-listing/{listingId:int}"
@using System.Security.Claims
@using DTOs.Application
@using DTOs.HouseListing
@using HousePalClient.Components.Layout
@using Microsoft.AspNetCore.Components
@using Services
@layout LoginLayout
@inject NavigationManager Navigation
@inject IHouseListingService HouseListingService
@inject IApplicationService ApplicationService
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode InteractiveServer

<CascadingAuthenticationState>
    <h1>House Listing Details</h1>

    <div class="listing-container">
        @if (_houseListing == null)
        {
        <p>Loading house listing details...</p>
        }
        else
        {
        <div class="house-listing-details">
            @if (_houseListing.Profile != null && _houseListing.Profile.Pictures != null && _houseListing.Profile.Pictures.Any())
            {
            <img src="https://localhost:7134/Filesave/@_houseListing.Profile.Pictures.First().Split('.')[0]/@_houseListing.Profile.Pictures.First().Split('.')[1]" alt="House Profile picture"/>
            }
            <h2>@_houseListing.Profile?.Title</h2>
            <p><strong>Start Date:</strong> @_houseListing.StartDate.ToShortDateString()</p>
            <p><strong>End Date:</strong> @_houseListing.EndDate.ToShortDateString()</p>
            <p><strong>Status:</strong> @_houseListing.Status</p>

            @if (_houseListing.Profile != null)
            {
            <div class="profile-details">
                <h3>House Profile Details</h3>
                <p><strong>Description:</strong> @_houseListing.Profile.Description</p>
                <p><strong>City:</strong> @_houseListing.Profile.City</p>
                <p><strong>Region:</strong> @_houseListing.Profile.Region</p>
                <p><strong>Address:</strong> @_houseListing.Profile.Address</p>
                <p><strong>Amenities:</strong> @string.Join(", ", _houseListing.Profile.Amenities)</p>
                <p><strong>Chores:</strong> @string.Join(", ", _houseListing.Profile.Chores)</p>
                <p><strong>Rules:</strong> @string.Join(", ", _houseListing.Profile.Rules)</p>
            </div>
            }
            <AuthorizeView Roles="HouseOwner">
                    <Authorized Context="authContext">
                        <button class="btn-delete" @onclick="DeleteListing">Delete Listing</button>
                    </Authorized>
                </AuthorizeView>

                <AuthorizeView Roles="HouseSitter">
                    <Authorized Context="authContext">
                        <Modal @ref="_modal" Title="Filtering listings">
                            <BodyTemplate>
                                <div class="row">
                                    <label for="message" class="col-5 col-md-3 text-end" required>Message for House Owner:</label>
                                    <textarea id="message" class="col-7 col-md-9" @bind="_message"></textarea>
                                </div>
                            </BodyTemplate>
                            <FooterTemplate>
                                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                                <Button Color="ButtonColor.Primary" @onclick="CreateApplication">Apply</Button>
                            </FooterTemplate>
                        </Modal>
                        <button type="button" class="btn btn-primary" @onclick="OnShowModalClick">Apply</button>
                    </Authorized>
                </AuthorizeView>

        </div>
        }
    </div>
</CascadingAuthenticationState>

<style>
    .listing-container {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        padding: 2em;
        background-color: #ffffff;
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        max-width: 800px;
        margin: 2em auto;
    }

    .listing-img {
        width: 100%;
        height: auto;
        border-radius: 10px;
        margin-bottom: 1em;
    }

    h1, h2, h3 {
        text-align: center;
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
    }

    p {
        font-family: Futura;
        color: #3d3d3d;
    }

    .house-listing-details p, .profile-details p {
        margin: 0.5em 0;
    }
</style>

@code {
    [Parameter] public int listingId { get; set; }

    private HouseListingDto _houseListing = null!;
    private Modal _modal = default!;
    private string _message = String.Empty;
    private int _sitterId = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _sitterId = int.Parse(userIdAsString);

        await LoadHouseListingDetails();
    }

    private async Task LoadHouseListingDetails()
    {
        _houseListing = await HouseListingService.GetSingleAsync(listingId, true);
    }
    
    private async Task DeleteListing()
    {
        await HouseListingService.DeleteAsync(_houseListing.Id);
        Navigation.NavigateTo("/view-all-house-listings"); 
    }
    
    private async Task OnShowModalClick()
    {
        await _modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await _modal.HideAsync();
    }
    
    private async Task CreateApplication()
    {
        CreateApplicationDto application = new CreateApplicationDto
        {
            ListingId = listingId,
            SitterId = _sitterId,
            Message = _message
        };
        await ApplicationService.AddAsync(application);
        await _modal.HideAsync();
        Navigation.NavigateTo("/view-all-house-listings"); 
    }
}
