@page "/view-house-listing/{listingId:int}"
@using System.Security.Claims
@using DTOs.Application
@using DTOs.HouseListing
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseListingService HouseListingService
@inject IHouseProfileService HouseProfileService
@inject ISitterReviewService SitterReviewService
@inject IHouseReviewService HouseReviewService
@inject IApplicationService ApplicationService
@inject AuthenticationStateProvider AuthProvider

<head>
    <title>Viewing house listing</title>
    <!-- Add Font Awesome CDN to your head tag -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</head>

<CascadingAuthenticationState>
<AuthorizeView Roles="HouseOwner">
    <Authorized>
    <div class="listing-container">
        @if (_houseListing == null)
        {
            <p>Loading house listing details...</p>
        }
        else
        {
            <div class="container house-profile">
                <!-- Carousel Section -->
                <div class="carousel-container">
                    <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            @for (int i = 0; i < _houseListing.Profile!.Pictures!.Count; i++)
                            {
                                <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                        class="@(i == 0 ? "active" : "")"
                                        aria-current="@(i == 0 ? "true" : "false")"
                                        aria-label="Slide @i">
                                </button>
                            }
                        </div>
                        <div class="carousel-inner">
                            @foreach (var image in _houseListing.Profile.Pictures)
                            {
                                <div class="carousel-item @(_houseListing.Profile.Pictures.IndexOf(image) == 0 ? "active" : "")">
                                    <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Image">
                                </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                </div>

                <div class="info-section">

                    <div class="text-content">
                        <!-- House Title and Location -->
                        <h1 class="house-title">@_houseListing.Profile.Title</h1>
                        <h2 class="house-location"><i class="fa-solid fa-location-dot" style="color: #ff7e5f;"></i> @_houseListing.Profile.City, @_houseListing.Profile.Region</h2>
                        <p class="house-description">@_houseListing.Profile.Description</p>
                    </div>

                    <div class="dates">
                        <p>
                            <strong>Start Date: </strong>@_houseListing.StartDate.ToString("dd/M/yyyy")
                        </p>
                        <p>
                            <strong>End Date: </strong>@_houseListing.EndDate.ToString("dd/M/yyyy")
                        </p>
                    </div>

                </div>

                <hr class="section-divider"/>

                <!-- House Chores & Amenities Section -->
                <div class="chores-amenities-row">
                    <div class="chores-column">
                        <h3>House Chores</h3>
                        <div class="chores-container">
                            @foreach (var chore in _houseListing.Profile!.Chores!)
                            {
                                <div class="pill">@chore</div>
                            }
                        </div>
                    </div>
                    <div class="vertical-divider"></div>
                    <div class="amenities-column">
                        <h3>House Amenities</h3>
                        <div class="amenities-container">
                            @foreach (var amenity in _houseListing.Profile!.Amenities!)
                            {
                                <div class="pill">@amenity</div>
                            }
                        </div>
                    </div>
                </div>

                <hr class="section-divider"/>

                <!-- House Rules Section -->
                <h3>House Rules</h3>
                <ol class="house-rules">
                    @foreach (var rule in _houseListing.Profile!.Rules!)
                    {
                        <li>@rule</li>
                    }
                </ol>

                <hr class="section-divider"/>

                <!-- Meet the Host Section -->
                <h3>Meet the Host</h3>
                <div class="host-section">
                    <img src="https://localhost:7134/Filesave/@_houseListing.Profile!.Owner!.ProfilePicture!.Split('.')[0]/@_houseListing.Profile.Owner.ProfilePicture.Split('.')[1]" alt="Host Profile Picture" class="host-picture"/>
                    <p class="host-bio">@_houseListing.Profile.Owner.Biography</p>
                </div>

                <hr class="section-divider"/>



                @if (_houseSitter)
                {
                    <button @onclick="OnShowModalClick">Apply!</button>
                }

                @if (_approvedApplication != null && _approvedApplication.Status == "Confirmed")
                {
                    <div class="applications-section">
                        <div class="card green">
                            <div class="card-img-container">
                                <img src="https://localhost:7134/Filesave/@_approvedApplication!.Sitter!.ProfilePicture!.Split('.')[0]/@_approvedApplication.Sitter.ProfilePicture.Split('.')[1]" class="card-img" alt="Sitter's profile picture">
                            </div>
                            
                            <div class="card-body">
                                <a href="https://localhost:7262/view-sitter-profile/@_approvedApplication.SitterId"><h5 class="card-title">@_approvedApplication.Sitter.Name</h5></a>
                                <p class="card-text" style="font-style: italic">You can now contact @_approvedApplication.Sitter.Name about their stay:</p>
                                <p class="card-text">@_approvedApplication.Sitter.Phone</p>
                                <p class="card-text">@_approvedApplication.Sitter.Email</p>
                                
                            </div>
                            </div>
                    </div>
                }
                else
                {

                    <div class="applications-section">

                        <h3>Applications for this listing: </h3>

                        @if (_applications != null)
                        {
                            @if (_approvedApplication != null)
                            {
                                <div class="card green">
                                    <div class="card-img-container">
                                        <img src="https://localhost:7134/Filesave/@_approvedApplication.Sitter!.ProfilePicture!.Split('.')[0]/@_approvedApplication.Sitter.ProfilePicture.Split('.')[1]" alt="Sitter's profile picture">
                                    </div>

                                    <div class="card-body">
                                        <a href="https://localhost:7262/view-sitter-profile/@_approvedApplication.SitterId"><h5 class="card-title">@_approvedApplication.Sitter.Name</h5></a>
                                        <p class="card-text" style="font-style: italic">@_approvedApplication.Sitter.Name has to confirm their stay before @(_approvedApplication.Date.Day + 3)/@_approvedApplication.Date.Month/@_approvedApplication.Date.Year.</p>
                                        <p class="card-text">
                                            <small>@_approvedApplication.Date</small>
                                        </p>
                                    </div>
                                </div>

                                <hr class="section-divider"/>
                            }

                            @foreach (var application in _applications)
                            {
                                @if (!application.Equals(_approvedApplication))
                                {
                                    <div class="card @(application.Status is "Rejected" or "Canceled" ? "rejected" : "")">
                                        <div class="card-img-container">
                                            <img src="https://localhost:7134/Filesave/@application.Sitter!.ProfilePicture!.Split('.')[0]/@application.Sitter.ProfilePicture.Split('.')[1]" alt="...">
                                        </div>

                                        <div class="card-body">
                                            <a href="https://localhost:7262/view-sitter-profile/@application.SitterId"><h5 class="card-title">@application.Sitter.Name</h5></a>
                                            <p class="card-text" style="font-style: italic">@(application.Status is "Canceled" ? $"{application.Sitter.Name} has canceled their application." : application.Message)</p>
                                            <p class="card-text"><i class="fa-solid fa-star"></i> @(application.Sitter.Reviews!.Any() ? application.Sitter!.Reviews!.Select(r => r.Rating).Average() : "No reviews")</p>
                                            <p class="card-text">
                                                <small>@application.Date</small>
                                            </p>


                                            @if (_approvedApplication == null && application.Status == "Pending")
                                            {
                                                <div class="card-buttons">
                                                    <Button Color="ButtonColor.Success" class="approve" @onclick="() => ApproveApplication(application)">Approve</Button>
                                                    <Button Color="ButtonColor.Danger" @onclick="() => RejectApplication(application)">Reject</Button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        }
                    </div>
                }

                <hr class="section-divider"/>

                <!-- Buttons Section -->
                <div class="action-buttons">
                    <button type="button" class="btn btn-secondary" @onclick="ShowConfirmation">Delete Listing</button>
                </div>

                <div>
                    @if (_showConfirmationMessage)
                    {
                        <div class="modal-background">
                            <div class="modal-content">
                                <h3>Are you sure?</h3>
                                <p>Do you really want to delete this listing? This action cannot be undone.</p>
                                <button class="btn btn-danger" @onclick="DeleteHouseListing">Yes</button>
                                <button class="btn btn-secondary" @onclick="CancelDelete">No</button>
                            </div>
                        </div>
                    }

                    @if (_showSuccessMessage)
                    {
                        <div class="alert alert-success" role="alert">
                            The house listing has been deleted successfully!
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    @if (_showModal)
    {
        <div class="modal-background">
            <div class="modal-content">
                <div class="row">
                    <label for="message" class="col-5 col-md-3 text-end" required>Message for House Owner:</label>
                    <textarea id="message" class="col-7 col-md-9" @bind="_message"></textarea>
                </div>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                <Button Color="ButtonColor.Primary" @onclick="CreateApplication">Apply</Button>
            </div>
        </div>
    }
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="HouseSitter">
    <Authorized>
        <div class="listing-container">
            @if (_houseListing == null)
            {
            <p>Loading house listing details...</p>
            }
            else
            {
            <div class="container house-profile">
                <!-- Carousel Section -->
                <div class="carousel-container">
                    <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            @for (int i = 0; i < _houseListing.Profile!.Pictures!.Count; i++)
                            {
                            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                    class="@(i == 0 ? "active" : "")"
                                    aria-current="@(i == 0 ? "true" : "false")"
                                    aria-label="Slide @i">
                            </button>
                            }
                        </div>
                        <div class="carousel-inner">
                            @foreach (var image in _houseListing.Profile.Pictures)
                            {
                            <div class="carousel-item @(_houseListing.Profile.Pictures.IndexOf(image) == 0 ? "active" : "")">
                                <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Image">
                            </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                </div>

                <div class="info-section">

                    <div class="text-content">
                        <!-- House Title and Location -->
                        <h1 class="house-title">@_houseListing.Profile.Title</h1>
                        <h2 class="house-location"><i class="fa-solid fa-location-dot" style="color: #ff7e5f;"></i> @_houseListing.Profile.City, @_houseListing.Profile.Region</h2>
                        <p class="house-description">@_houseListing.Profile.Description</p>
                    </div>

                    <div class="dates">
                        <p>
                            <strong>Start Date: </strong>@_houseListing.StartDate.ToString("dd/M/yyyy")
                        </p>
                        <p>
                            <strong>End Date: </strong>@_houseListing.EndDate.ToString("dd/M/yyyy")
                        </p>
                    </div>

                </div>

                <hr class="section-divider"/>

                <!-- House Chores & Amenities Section -->
                <div class="chores-amenities-row">
                    <div class="chores-column">
                        <h3>House Chores</h3>
                        <div class="chores-container">
                            @foreach (var chore in _houseListing.Profile!.Chores!)
                            {
                            <div class="pill">@chore</div>
                            }
                        </div>
                    </div>
                    <div class="vertical-divider"></div>
                    <div class="amenities-column">
                        <h3>House Amenities</h3>
                        <div class="amenities-container">
                            @foreach (var amenity in _houseListing.Profile!.Amenities!)
                            {
                            <div class="pill">@amenity</div>
                            }
                        </div>
                    </div>
                </div>

                <hr class="section-divider"/>

                <!-- House Rules Section -->
                <h3>House Rules</h3>
                <ol class="house-rules">
                    @foreach (var rule in _houseListing.Profile!.Rules!)
                    {
                    <li>@rule</li>
                    }
                </ol>

                <hr class="section-divider"/>

                <!-- Meet the Host Section -->
                <h3>Meet the Host</h3>
                <div class="host-section">
                    <img src="https://localhost:7134/Filesave/@_houseListing.Profile!.Owner!.ProfilePicture!.Split('.')[0]/@_houseListing.Profile.Owner.ProfilePicture.Split('.')[1]" alt="Host Profile Picture" class="host-picture"/>
                    <p class="host-bio">@_houseListing.Profile.Owner.Biography</p>
                </div>

                <hr class="section-divider"/>
                
                @if (_hasApplied)
                {
                <p class="alert alert-info">You have already applied for this listing.</p>
                }
                else
                {
                <button class="btn btn-primary" @onclick="OnShowModalClick">Apply</button>
                }

                @if (_applications != null && _applications.Any())
                {
                <div class="applications-section">
                    <h3>Your Applications</h3>
                    @foreach (var application in _applications.Where(a => a.SitterId == _sitterId))
                    {
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">@application.Message</h5>
                            <p class="card-text">
                                <strong>Status:</strong> @application.Status
                            </p>
                            <p class="card-text"><small class="text-muted">@application.Date</small></p>
                        </div>
                    </div>
                    }
                </div>
                }

                @if (!string.IsNullOrEmpty(_successMessage))
                {
                <div class="alert alert-success" role="alert">
                    @_successMessage
                </div>
                }

                @if (_showModal)
                {
                <div class="modal-background">
                    <div class="modal-content">
                        <h3>Send Application</h3>
                        <textarea @bind="_message" class="form-control" placeholder="Write your message..."></textarea>
                        <!-- Display Message if exists -->
                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                        <div class="alert alert-danger">@_errorMessage</div>
                        }
                        <button class="btn btn-secondary" @onclick="OnHideModalClick">Close</button>
                        <button class="btn btn-primary" @onclick="CreateApplication">Send</button>
                    </div>
                </div>
                }
            </div>
            }
        </div>
    </Authorized>
</AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in to view this house profile.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
    @@font-face {
        font-family: 'LogoFont';
        src: url('fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    h3 {
        font-family: 'LogoFont', sans-serif;
        color: #3d3d3d;
    }
    
    .info-section {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 2em;
        margin-top: 1.5em;
    }
    
    .text-content {
        flex: 2;
    }
    
    .dates {
        flex: 0.65;
        background-color: #ff7e5f;
        padding: 1em;
        border-radius: 10px;
        text-align: center;
        font-family: 'FuturaFont', sans-serif;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .dates p{
        margin: 0.5em 0;
    }
    

    .carousel-container {
        margin-bottom: 2em;
    }

    .host-section {
        display: flex;
        align-items: center;
        gap: 1.5em;
    }

    .host-picture {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
    }

    .host-bio {
        flex: 1;
        font-size: 1rem;
        color: #333;
        line-height: 1.6;
    }

    .carousel img {
        max-height: 32em;
        object-fit: cover;
        border-radius: 10px;
    }

    .house-title {
        font-size: 2.5rem;
        color: #333;
        margin-bottom: 0.5em;
        font-family: 'LogoFont', sans-serif;
    }

    .house-location {
        font-size: 1.25rem;
        color: #3d3d3d;
        margin-bottom: 1em;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-description {
        font-size: 1rem;
        color: #3d3d3d;
        margin-bottom: 1.5em;
        font-family: 'FuturaFont', sans-serif;
    }

    .section-divider {
        margin: 2em 0;
        border: 0;
        height: 1px;
        background-color: #ddd;
    }

    .chores-amenities-row {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        gap: 1em;
        font-family: 'FuturaFont', sans-serif;
    }

    .chores-column, .amenities-column {
        flex: 1;
    }

    .chores-container, .amenities-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1em;
        margin-top: 1em;
    }

    .pill {
        background-color: #ff7e5f;
        color: white;
        padding: 0.5em 1em;
        border-radius: 50px;
        font-size: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: 'FuturaFont', sans-serif;
    }

    .vertical-divider {
        width: 1px;
        background-color: #ddd;
        height: auto;
        margin: 0 1em;
    }

    .house-rules {
        list-style: decimal inside;
        font-size: 1rem;
        color: #3d3d3d;
        line-height: 1.8;
        margin: 1em 0;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-rules li {
        margin-bottom: 0.5em;
    }
    
    .applications-section{
        padding: 0.85em;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .card-buttons {
        display: flex;
        justify-content: space-evenly;
    }
    
    .card {
        display: flex;
        align-items: center;
        flex-direction: row;
        border-radius: 12px;
        font-family: 'FuturaFont', sans-serif;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-style: none;
        margin: 0.75em;
        overflow: hidden;
        width: 600px;
        background-color: white;
        color: #3d3d3d;
    }
    
    .card a{
        color: #3d3d3d;
    }

    .card a:hover{
        color: blue;
    }

    .card.green a{
        color: white;
    }

    .card.green a:hover{
        color: blue;
    }
    
    .card.rejected{
        background-color: #dc3545;
        color: white;
    }

    .card.rejected a{
        color: white;
    }

    .card.rejected a:hover{
        color: blue;
    }

    .card.green{
        background-color: green;
        color: white;
    }

    .card-img-container{
        flex: 0 0 200px;
        height: 200px;
        margin: 1em;
        border-radius: 8px;
        overflow: hidden;
    }

    .card-img-container img{
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .card-body {
        flex: 1;
        display: flex;
        flex-direction: column;
    }
    
    .approve {
        margin-right: 0.5em;
    }

    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        width: 300px;
    }
    
    .modal-content button {
        margin: 10px;
    }
    
    h3 {
        font-family: 'LogoFont', sans-serif;
        color: #3d3d3d;
        margin-bottom: 0.5em;
    }

    .not-authorized-container {
        text-align: center;
        margin-top: 5em;
        padding: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .not-authorized-container h2 {
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        font-size: 2em;
        margin-bottom: 0.5em;
    }

    .not-authorized-container p {
        font-family: 'FuturaFont', sans-serif;
        color: #333;
        font-size: 1.2em;
        margin-bottom: 1.5em;
    }

    .not-authorized-container .btn {
        font-size: 1em;
        padding: 0.75em 1.5em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;

    }

    .not-authorized-container .btn:hover {
        background-color: #feb47b;
    }
    .alert {
        padding: 1em;
        margin-bottom: 1em;
        border: 1px solid transparent;
        border-radius: 0.375em;
        font-family: 'FuturaFont', sans-serif;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }
</style>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;
    [Parameter] public int ListingId { get; set; }
    private bool _showConfirmationMessage;
    private bool _showSuccessMessage;
    private HouseListingDto? _houseListing;
    private List<ApplicationDto>? _applications;
    private bool _houseSitter;
    private bool _hasApplied;
    private bool _showModal;
    private string _message = string.Empty;
    private string _successMessage = string.Empty;
    private string _errorMessage = string.Empty;
    private ApplicationDto? _approvedApplication;

    private int _sitterId;
    
    private void ShowConfirmation()
    {
        _showConfirmationMessage = true;
        _showSuccessMessage = false;
    }
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/");
    }
    private async Task DeleteHouseListing()
    {
        if (_houseListing != null)
        {
            _showConfirmationMessage = false;
            await HouseListingService.DeleteAsync(_houseListing.Id);
            _showSuccessMessage = true;
            await Task.Delay(2000); 
            Navigation.NavigateTo("/view-my-listings");
        }
    }

    private void CancelDelete()
    {
        _showConfirmationMessage = false;
    }
    
    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        var authState = await AuthProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;
            
        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }
            
        IEnumerable<Claim> claims = user.Claims;
        _houseSitter = claims.Single(c => c.Type == ClaimTypes.Role).Value == "HouseSitter";
        if (_houseSitter)
        {
            string userIdAsString = claims.Single(c => c.Type == "Id").Value;
            _sitterId = int.Parse(userIdAsString);
        }
        await LoadHouseListingDetails();
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadApplications()
    {
        var allApplications = ApplicationService.GetApplicationsByListing(ListingId, "", true).ToList();
        _applications = _houseSitter
            ? allApplications.Where(a => a.SitterId == _sitterId).ToList() 
            : allApplications;

        foreach (var application in _applications)
        {
            application.Sitter!.Reviews = SitterReviewService.GetAllReviewsForSitter(application.SitterId).ToList();
        }

        _hasApplied = _applications.Any(a => a.SitterId == _sitterId);
        _approvedApplication = _applications.Any(a => a.Status == "Approved") ? _applications.SingleOrDefault(a => a.Status == "Approved") : _applications.SingleOrDefault(a => a.Status == "Confirmed");
    }

    private async Task LoadHouseListingDetails()
    {
        _houseListing = await HouseListingService.GetSingleAsync(ListingId, false);

        if (_houseListing.Profile == null && _houseListing.ProfileId != 0)
        {
            _houseListing.Profile = await HouseProfileService.GetSingleAsync(_houseListing.ProfileId, true);
            _houseListing.Profile.Reviews = HouseReviewService.GetAllReviewsForProfile(_houseListing.ProfileId).ToList();
        }
    }
    

    private async void ApproveApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Approved"
        };

        await ApplicationService.UpdateAsync(updatedApplication);
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
    }

    private async void RejectApplication(ApplicationDto application)
    {
        UpdateApplicationDto update = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Rejected"
        };

        await ApplicationService.UpdateAsync(update);
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
    }

    private void OnShowModalClick()
    {
        //  Navigation.NavigateTo($"/application/{ListingId}");
        _showModal = true;
    }
    
    private void OnHideModalClick()
    {
        _showModal = false;
    }
    
    private async void CreateApplication()
    {if (string.IsNullOrWhiteSpace(_message))
        {
            _errorMessage = "You must provide a message for the house owner.";
            return;
        }
        if (_hasApplied)
        {
            return;
        }
        CreateApplicationDto application = new CreateApplicationDto
        {
            ListingId = ListingId,
            SitterId = _sitterId,
            Message = _message
        };
        await ApplicationService.AddAsync(application);
        _successMessage = "Your application was successfully sent!";
        _showModal = false;
        _hasApplied = true;
        Navigation.NavigateTo("/view-my-applications"); 
    }

}