@page "/view-house-listing/{listingId:int}"
@using DTOs.Application
@using DTOs.HouseListing
@using HousePalClient.Components.Layout
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseListingService HouseListingService
@inject IHouseProfileService HouseProfileService
@inject IApplicationService ApplicationService

<head>
    <!-- Add Font Awesome CDN to your head tag -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</head>


<div class="listing-container">
    @if (_houseListing == null)
    {
        <p>Loading house listing details...</p>
    }
    else
    {
        <div class="container house-profile">
            <!-- Carousel Section -->
            <div class="carousel-container">
                <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                        @for (int i = 0; i < _houseListing.Profile!.Pictures!.Count; i++)
                        {
                            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                    class="@(i == 0 ? "active" : "")"
                                    aria-current="@(i == 0 ? "true" : "false")"
                                    aria-label="Slide @i">
                            </button>
                        }
                    </div>
                    <div class="carousel-inner">
                        @foreach (var image in _houseListing.Profile.Pictures)
                        {
                            <div class="carousel-item @(_houseListing.Profile.Pictures.IndexOf(image) == 0 ? "active" : "")">
                                <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Image">
                            </div>
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>

            <div class="info-section">

                <div class="text-content">
                    <!-- House Title and Location -->
                    <h1 class="house-title">@_houseListing.Profile.Title</h1>
                    <h2 class="house-location"><i class="fa-solid fa-location-dot" style="color: #ff7e5f;"></i> @_houseListing.Profile.City, @_houseListing.Profile.Region</h2>
                    <p class="house-description">@_houseListing.Profile.Description</p>
                </div>

                <div class="dates">
                    <p>
                        <strong>Start Date: </strong>@_houseListing.StartDate.ToString("dd/M/yyyy")
                    </p>
                    <p>
                        <strong>End Date: </strong>@_houseListing.EndDate.ToString("dd/M/yyyy")
                    </p>
                </div>

            </div>

            <hr class="section-divider"/>

            <!-- House Chores & Amenities Section -->
            <div class="chores-amenities-row">
                <div class="chores-column">
                    <h3>House Chores</h3>
                    <div class="chores-container">
                        @foreach (var chore in _houseListing.Profile!.Chores!)
                        {
                            <div class="pill">@chore</div>
                        }
                    </div>
                </div>
                <div class="vertical-divider"></div>
                <div class="amenities-column">
                    <h3>House Amenities</h3>
                    <div class="amenities-container">
                        @foreach (var amenity in _houseListing.Profile!.Amenities!)
                        {
                            <div class="pill">@amenity</div>
                        }
                    </div>
                </div>
            </div>

            <hr class="section-divider"/>

            <!-- House Rules Section -->
            <h3>House Rules</h3>
            <ol class="house-rules">
                @foreach (var rule in _houseListing.Profile.Rules)
                {
                    <li>@rule</li>
                }
            </ol>

            <hr class="section-divider"/>

            <!-- Meet the Host Section -->
            <h3>Meet the Host</h3>
            <div class="host-section">
                <img src="https://localhost:7134/Filesave/@_houseListing.Profile!.Owner!.ProfilePicture!.Split('.')[0]/@_houseListing.Profile.Owner.ProfilePicture.Split('.')[1]" alt="Host Profile Picture" class="host-picture"/>
                <p class="host-bio">@_houseListing.Profile.Owner.Biography</p>
            </div>

            <hr class="section-divider"/>

            <div class="applicants-section">
            
                <h3>Applicants for this listing:</h3>

                @if (_approvedApplication != null && _approvedApplication.Status == "Confirmed")
                {
                    <div class="card text-white bg-success border-success mb-3" style="max-width: 540px;">
                        <div class="row no-gutters">
                            <div class="col-md-4">
                                <img src="https://localhost:7134/Filesave/@_approvedApplication.Sitter.ProfilePicture.Split('.')[0]/@_approvedApplication.Sitter.ProfilePicture.Split('.')[1]" class="card-img" alt="Sitter's profile picture">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@_approvedApplication.Sitter.Name</h5>
                                    <p class="card-text">@_approvedApplication.Sitter.Phone</p>
                                    <p class="card-text">@_approvedApplication.Sitter.Email</p>
                                    <p class="card-text">
                                        <small class="text-muted">@_approvedApplication.Date</small>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    @if (_applications != null)
                    {
                        @if (_approvedApplication != null)
                        {
                            <div class="card text-white bg-success border-success mb-3" style="max-width: 540px;">
                                <div class="row no-gutters">
                                    <div class="col-md-4">
                                        <img src="https://localhost:7134/Filesave/@_approvedApplication.Sitter.ProfilePicture.Split('.')[0]/@_approvedApplication.Sitter.ProfilePicture.Split('.')[1]" class="card-img" alt="Sitter's profile picture">
                                    </div>
                                    <div class="col-md-8">
                                        <div class="card-body">
                                            <h5 class="card-title">@_approvedApplication.Sitter.Name</h5>
                                            <p class="card-text">@_approvedApplication.Message</p>
                                            <p class="card-text">
                                                <small class="text-muted">@_approvedApplication.Date</small>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <hr class="section-divider"/>
                        }

                        @foreach (var application in _applications)
                        {
                            @if (!application.Equals(_approvedApplication))
                            { 
                                <div class="card @(application.Status == "Rejected" ? "rejected" : "pending") mb-3">
                                    <div class="row no-gutters">
                                        <div class="col-md-4">
                                            <img src="https://localhost:7134/Filesave/@application.Sitter.ProfilePicture.Split('.')[0]/@application.Sitter.ProfilePicture.Split('.')[1]" class="card-img" alt="...">
                                        </div>
                                        <div class="col-md-8">
                                            <div class="card-body">
                                                <a><h5 class="card-title">@application.Sitter.Name</h5></a>
                                                <p class="card-text">@application.Message</p>
                                                <p class="card-text">
                                                    <small>@application.Date</small>
                                                </p>
                                                @if (_approvedApplication == null && application.Status == "Pending")
                                                {
                                                    <div class="card-buttons">
                                                        <Button Color="ButtonColor.Success" class="approve" @onclick="() => ApproveApplication(application)">Approve</Button>
                                                        <Button Color="ButtonColor.Danger" class="approve" @onclick="() => RejectApplication(application)">Reject</Button>
                                                        <div class="card-buttons">
                                                            <Button Color="ButtonColor.Primary" @onclick="() => SitterProfile(application.SitterId)">View details</Button>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                }
            </div>
        </div>
    }
</div>

<style>
    @@font-face {
        font-family: 'LogoFont';
        src: url('fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    h3 {
        font-family: 'LogoFont', sans-serif;
        color: #3d3d3d;
        margin-bottom: 0.7em;
    }
    
    .info-section {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 2em;
        margin-top: 1.5em;
    }
    
    .text-content {
        flex: 2;
    }
    
    .dates {
        flex: 0.65;
        background-color: #ff7e5f;
        padding: 1em;
        border-radius: 10px;
        text-align: center;
        font-family: 'FuturaFont', sans-serif;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .dates p{
        margin: 0.5em 0;
    }
    

    .carousel-container {
        margin-bottom: 2em;
    }

    .host-section {
        display: flex;
        align-items: center;
        gap: 1.5em;
    }

    .host-picture {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
    }

    .host-bio {
        flex: 1;
        font-size: 1rem;
        color: #333;
        line-height: 1.6;
    }

    .carousel img {
        max-height: 32em;
        object-fit: cover;
        border-radius: 10px;
    }

    .profile-container{
        padding: 0.85em;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .house-title {
        font-size: 2.5rem;
        color: #333;
        margin-bottom: 0.5em;
        font-family: 'LogoFont', sans-serif;
    }

    .house-location {
        font-size: 1.25rem;
        color: #3d3d3d;
        margin-bottom: 1em;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-description {
        font-size: 1rem;
        color: #3d3d3d;
        margin-bottom: 1.5em;
        font-family: 'FuturaFont', sans-serif;
    }

    .section-divider {
        margin: 2em 0;
        border: 0;
        height: 1px;
        background-color: #ddd;
    }

    .chores-amenities-row {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        gap: 1em;
        font-family: 'FuturaFont', sans-serif;
    }

    .chores-column, .amenities-column {
        flex: 1;
    }

    .chores-container, .amenities-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1em;
        margin-top: 1em;
    }

    .pill {
        background-color: #ff7e5f;
        color: white;
        padding: 0.5em 1em;
        border-radius: 50px;
        font-size: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: 'FuturaFont', sans-serif;
    }

    .vertical-divider {
        width: 1px;
        background-color: #ddd;
        height: auto;
        margin: 0 1em;
    }

    .house-rules {
        list-style: decimal inside;
        font-size: 1rem;
        color: #3d3d3d;
        line-height: 1.8;
        margin: 1em 0;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-rules li {
        margin-bottom: 0.5em;
    }
    
    .applicants-section{
        padding: 0.85em;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .card-buttons {
        display: flex;
        justify-content: space-evenly;
    }
    
    .card-img {
        border-radius: 12px 8px 8px 12px; 
    }
    
    .card {
        max-width: 540px;
        border-radius: 12px;
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-style: none;
    }

    .card.pending{
        background-color: #f1f1f1;
    }
    
    .card.rejected{
        background-color: #dc3545;
        color: white;
    }
    
    .card-body {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }
    
    .approve {
        margin-right: 0.5em;
    }
    
    
</style>

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Parameter] public int listingId { get; set; }

    private HouseListingDto? _houseListing;
    private List<ApplicationDto>? _applications;
    private ApplicationDto? _approvedApplication;

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        await LoadHouseListingDetails();
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadApplications()
    {
        _applications = ApplicationService.GetApplicationsByListing(listingId, true).ToList();
        if (_applications.Any(a => a.Status == "Approved"))
            _approvedApplication = _applications.SingleOrDefault(a => a.Status == "Approved");
        else _approvedApplication = _applications.SingleOrDefault(a => a.Status == "Confirmed");
    }

    private async Task LoadHouseListingDetails()
    {
        _houseListing = await HouseListingService.GetSingleAsync(listingId, false);

        if (_houseListing.Profile == null && _houseListing.ProfileId != 0)
        {
            _houseListing.Profile = await HouseProfileService.GetSingleAsync(_houseListing.ProfileId, true);
        }
    }

    private async Task DeleteListing()
    {
        await HouseListingService.DeleteAsync(_houseListing.Id);
        Navigation.NavigateTo("/view-open-house-listings");
    }

    private async void ApproveApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Approved"
        };

        await ApplicationService.UpdateAsync(updatedApplication);
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
    }

    private async void RejectApplication(ApplicationDto application)
    {
        UpdateApplicationDto update = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Rejected"
        };

        await ApplicationService.UpdateAsync(update);
        await LoadApplications();
        await InvokeAsync(StateHasChanged);
    }

    private void SitterProfile(int profileID)
    {
        Navigation.NavigateTo($"/view-sitter-profile/{profileID}");
    }

}