@page "/view-my-applications"
@using System.Security.Claims
@using DTOs.Application
@using DTOs.HouseListing
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IApplicationService ApplicationService
@inject IHouseListingService ListingService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page-container">
    <div class="signup-page-container">
        <h1>My Applications</h1>

        @if (_applications == null || !_applications.Any())
        {
            <p>No applications found.</p>
        }
        else
        {
            <div class="house-profile-list">
                @foreach (var application in _applications)
                {
                    <div class="card mb-3" style="max-width: 540px;">
                        <div class="row no-gutters">
                            <div class="col-md-4">
                                <img src="https://localhost:7134/Filesave/@application.Listing!.Profile!.Pictures![0].Split('.')[0]/@application.Listing!.Profile!.Pictures![0].Split('.')[1]" class="card-img" alt="...">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <p>@application.Listing!.Profile!.Title</p>
                                    <p>@application.Listing.StartDate.ToString("dd/M/yyyy") - @application.Listing.EndDate.ToString("dd/M/yyyy")</p>
                                    <p>@application.Status</p>
                                    <button type="button" class="btn btn-primary" @onclick="() => NavigateToDetails(application.ListingId)">More Details</button>
                                </div>
                                @if (application.Status == "Approved")
                                {
                                    <div class="card-buttons">
                                        <Button Color="ButtonColor.Success" @onclick="() => ConfirmApplication(application)">Confirm</Button>
                                        <Button Color="ButtonColor.Danger" @onclick="() => CancelApplication(application)">Cancel</Button>
                                    </div>
                                }

                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>

    @@font-face {
        font-family: 'LogoFont';
        src: url('http://localhost:[puerto]/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    h1 {
        text-align: center;
        color: #ff7e5f;
        margin-bottom: 1em;
        font-family: 'LogoFont', sans-serif;
    }

    .btn {
        font-size: 0.85em;
        padding: 0.375em 0.75em;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-list {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5em;
        justify-content: center;
    }

    .house-profile-item div {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 95%;
        height: 95%;
    }

    p {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        margin: 1em;
    }
</style>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;
    private List<ApplicationDto>? _applications;
    private int _userId;

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadAllApplications();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadAllApplications()
    {
        _applications = new List<ApplicationDto>();
        _applications!.AddRange(await Task.Run(() => ApplicationService.GetApplicationsByUserStatus(_userId, "Pending", true, true).ToList()));
        _applications!.AddRange(await Task.Run(() => ApplicationService.GetApplicationsByUserStatus(_userId, "Approved", true, true).ToList()));
        _applications!.AddRange(await Task.Run(() => ApplicationService.GetApplicationsByUserStatus(_userId, "Rejected", true, true).ToList()));
        _applications!.AddRange(await Task.Run(() => ApplicationService.GetApplicationsByUserStatus(_userId, "Canceled", true, true).ToList()));
    }

    private void NavigateToDetails(int listingId)
    {
        Navigation.NavigateTo($"/view-house-listing/{listingId}");
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/create-house-listing");
    }

    private async Task ConfirmApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Confirmed"
        };

        UpdateHouseListingDto updatedListing = new UpdateHouseListingDto
        {
            Id = application.ListingId,
            Status = "Closed"
        };

        await ApplicationService.UpdateAsync(updatedApplication);
        await ListingService.UpdateAsync(updatedListing);
        await LoadAllApplications();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CancelApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Canceled"
        };
        
        await ApplicationService.UpdateAsync(updatedApplication);
        await LoadAllApplications();
        await InvokeAsync(StateHasChanged);
    }
}