@rendermode InteractiveServer

@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Security.Claims
@using DTOs.HouseOwner
@using Microsoft.AspNetCore.Components
@using Services

<h3>HouseOwnerPage</h3>

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <p>@context.User.Claims.Single(c => c.Type == "Id")</p>
        @* <p>User: @context.User.Claims.Where(c => c.Type.Equals(ClaimTypes.Role)).ToString()</p> *@
        <p>You have the 'HouseOwner' role claim.</p>

    </AuthorizeView>
    <AuthorizeView Roles="HouseSitter">
        <p>User: @context.User.Claims.First().Value</p>
        <p>You have 'HouseSitter' role claims.</p>
    </AuthorizeView>
    <AuthorizeView>
        <Authorized>
            <h3>Hello, @context.User.Claims.First().Value</h3>
        </Authorized>
        <NotAuthorized>
            lol you are not logged in!
            <br/>
            <button @onclick="LogIn"> Log in </button>
        </NotAuthorized>
    </AuthorizeView>

</CascadingAuthenticationState>

<hr/>

<input @bind="_houseOwnerId" />
<button @onclick="GetHouseOwner">Get House Owner</button>

<br/>

<input @bind="_houseOwnerAddress" />
<input @bind="_houseOwnerBiography" />
<button @onclick="CreateHouseOwner">Create House Owner</button>

<br/>

<input @bind="_houseOwnerId" />
<input @bind="_houseOwnerAddress" />
<input @bind="_houseOwnerBiography" />
<button @onclick="UpdateHouseOwner">Update House Owner</button>

<br/>

<input @bind="_houseOwnerId" />
<button @onclick="DeleteHouseOwner">Delete House Owner</button>

<p>Gotten House Owner: @_houseOwner.UserId, @_houseOwner.Address, @_houseOwner.Biography</p>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }
    [Inject] public IHouseOwnerService HouseOwnerService { get; set; }
    
    string _houseOwnerId = "";
    string _houseOwnerAddress = "";
    string _houseOwnerBiography = "";
    HouseOwnerDto _houseOwner = new HouseOwnerDto();
    
    async void LogIn()
    {
        Navigation.NavigateTo("/login");
    }
    
    async void GetHouseOwner()
    {
        _houseOwner = await HouseOwnerService.GetSingleAsync(int.Parse(_houseOwnerId));
        Console.WriteLine($"{_houseOwner.UserId} - {_houseOwner.Address} - {_houseOwner.Biography}");
        await InvokeAsync(StateHasChanged);
    }
    
    async void CreateHouseOwner()
    {
        _houseOwner.Address = _houseOwnerAddress;
        _houseOwner.Biography = _houseOwnerBiography;
        _houseOwner = await HouseOwnerService.AddAsync(_houseOwner);
        Console.WriteLine($"{_houseOwner.UserId} - {_houseOwner.Address} - {_houseOwner.Biography}");
        await InvokeAsync(StateHasChanged);
    }
    
    async void UpdateHouseOwner()
    {
        _houseOwner.UserId = int.Parse(_houseOwnerId);
        _houseOwner.Address = _houseOwnerAddress;
        _houseOwner.Biography = _houseOwnerBiography;
        _houseOwner = await HouseOwnerService.UpdateAsync(_houseOwner);
        Console.WriteLine($"{_houseOwner.UserId} - {_houseOwner.Address} - {_houseOwner.Biography}");
        await InvokeAsync(StateHasChanged);
    }
    
     async void DeleteHouseOwner()
    {
        await HouseOwnerService.DeleteAsync(int.Parse(_houseOwnerId));
        // await InvokeAsync(StateHasChanged);
    }

    
    
    protected override async Task OnParametersSetAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                // Console.WriteLine(user.Identities.FirstOrDefault().FindFirst(c => c.Type == "Id"));
                Console.WriteLine(user.Claims.FirstOrDefault() is null ? "its null" : user.Claims.First().Value);
                // Console.WriteLine(user.IsInRole("HouseOwner"));
                var claims = user.Identities;
                // Console.WriteLine(claims.Count());
                // foreach (var claim in )
                // {
                //     Console.WriteLine($"{claim.Type} - {claim.Value}");
                // }
            }
                
        }
    }

}