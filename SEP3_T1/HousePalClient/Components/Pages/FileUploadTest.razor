@page "/file-upload-test"
@using System.Linq
@using System.Net.Http.Headers
@using DTOs
@inject HttpClient Http
@inject ILogger<FileUploadTest> Logger
@rendermode InteractiveServer

<PageTitle>File Upload 2</PageTitle>

<h1>File Upload Example 2</h1>

<p>
    <label>
        Upload up to @maxAllowedFiles files:
        <InputFile OnChange="OnInputFileChange" multiple/>
    </label>
</p>

@if (files.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>
                        File: @file.Name
                        <br>
                        @if (FileUpload(uploadResults, file.Name, Logger,
                                 out var result))
                        {
                            <span>
                                Stored File Name: @result.StoredFileName
                            </span>
                            <img src="https://localhost:7134/Filesave/@result.StoredFileName!.Split('.')[0]/@result.StoredFileName!.Split('.')[1]" alt="@result.StoredFileName!"/>
                        }
                        else
                        {
                            <span>
                                There was an error uploading the file
                                (Error: @result.ErrorCode).
                            </span>
                        }
                    </li>
                }
            </ul>
        </div>
    </div>
    

}

@code {
    private List<File> files = new();
    private List<FileDto> uploadResults = new();
    private int maxAllowedFiles = 3;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        long maxFileSize = long.MaxValue;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                    f => f.FileName == file.Name) is null)
            {
                try
                {
                    files.Add(new() { Name = file.Name });

                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = 
                        new MediaTypeHeaderValue(file.ContentType);

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}", 
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                        {
                            FileName = file.Name, 
                            ErrorCode = 6, 
                            Uploaded = false
                        });
                }
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/Filesave", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<FileDto>>();

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }
    }

    private static bool FileUpload(IList<FileDto> uploadResults,
        string? fileName, ILogger<FileUploadTest> logger, out FileDto result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation($"{fileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    public static class DownloadFile 
    {   
        public static async Task<byte[]?> GetUrlContent(string url)  
        {  
            using (var client = new HttpClient())  
            using (var result = await client.GetAsync(url))  
                return result.IsSuccessStatusCode ? await result.Content.ReadAsByteArrayAsync() : null;  
        }  
    } 

    private class File
    {
        public string? Name { get; set; }
    }

}