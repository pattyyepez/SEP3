@page "/view-my-past-listings"
@using System.Security.Claims
@using DTOs.HouseListing
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IHouseListingService HouseListingService
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
<div class="page-container">
    <div class="signup-page-container">
        <h1>My Past Listings</h1>

        @if (_houseListings == null || !_houseListings.Any())
        {
            <p>No past listings found.</p>
        }
        else
        {
            <div class="house-profile-list">
                @foreach (var listing in _houseListings)
                {
                    <div class="house-profile-item">
                        @if (listing.Profile!.Pictures != null && listing.Profile.Pictures.Any())
                        {
                            <img src="https://localhost:7134/Filesave/@listing.Profile.Pictures[0].Split('.')[0]/@listing.Profile.Pictures[0].Split('.')[1]" alt="House Picture" class="house-profile-img"/>
                        }
                        <p>@listing.Profile.Title</p>
                        <p>@listing.StartDate.ToString("dd/M/yyyy") - @listing.EndDate.ToString("dd/M/yyyy")</p>
                        <p>Status: Closed</p>
                        <button type="button" class="btn btn-primary" @onclick="() => NavigateToDetails(listing.Id)">More Details</button>
                    </div>
                }
            </div>
        }
    </div>
</div>

        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>

    @@font-face {
        font-family: 'LogoFont';
        src: url('http://localhost:[puerto]/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    h1 {
        text-align: center;
        color: #ff7e5f;
        margin-bottom: 1em;
        font-family: 'LogoFont', sans-serif;
    }

    .btn {
        font-size: 0.85em;
        padding: 0.375em 0.75em;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-list {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5em;
        justify-content: center;
    }

    .house-profile-item {
        width: 15em;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 0 0 1em 0;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-item div {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 95%;
        height: 95%;
    }

    .house-profile-img {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 10px 10px 0 0;
        display: block;
    }

    p {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        margin: 1em;
    }

    .plus {
        cursor: pointer;
    }

    .not-authorized-container {
        text-align: center;
        margin-top: 5em;
        padding: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .not-authorized-container h2 {
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        font-size: 2em;
        margin-bottom: 0.5em;
    }

    .not-authorized-container p {
        font-family: 'FuturaFont', sans-serif;
        color: #333;
        font-size: 1.2em;
        margin-bottom: 1.5em;
    }

    .not-authorized-container .btn {
        font-size: 1em;
        padding: 0.75em 1.5em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;

    }

    .not-authorized-container .btn:hover {
        background-color: #feb47b;
    }
</style>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;
    private List<HouseListingDto>? _houseListings;
    private int _userId;

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        _houseListings = new List<HouseListingDto>();
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadPastHouseListings();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadPastHouseListings()
    {
        var allListings = await Task.Run(() => HouseListingService.GetAllByOwnerStatus(_userId, "Closed", true, true));
        var today = DateOnly.FromDateTime(DateTime.Today); 

        _houseListings = allListings
            .Where(listing => listing.EndDate < today) 
            .ToList();
    }
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void NavigateToDetails(int listingId)
    {
        Navigation.NavigateTo($"/view-listing/{listingId}");
    }
}