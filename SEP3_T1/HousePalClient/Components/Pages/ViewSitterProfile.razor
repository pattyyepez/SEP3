@page "/view-sitter-profile/{profileId:int}"
@using DTOs.HouseSitter
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using DTOs.SitterReview
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseSitterService HouseSitterService
@inject ISitterReviewService SitterReviewService
@rendermode InteractiveServer

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider


    <!-- Add Font Awesome CDN to your head tag -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div class="profile-container">
                @if (_houseSitter == null)
                {
                    <p>Loading house sitter details...</p>
                }
                else
                {
                    <div class="container sitter-profile">
                        <!-- Carousel Section -->
                        <div class="carousel-container">
                            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-indicators">
                                    @for (int i = 0; i < _houseSitter.Pictures.Count; i++)
                                    {
                                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                                class="@(i == 0 ? "active" : "")"
                                                aria-current="@(i == 0 ? "true" : "false")"
                                                aria-label="Slide @i"></button>
                                    }
                                </div>
                                <div class="carousel-inner">
                                    @foreach (var image in _houseSitter.Pictures)
                                    {
                                        <div class="carousel-item @(_houseSitter.Pictures.IndexOf(image) == 0 ? "active" : "")">
                                            <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Sitter Picture" />
                                        </div>
                                    }
                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            </div>
                        </div>

                        <h1 class="house-title">@_houseSitter.Name</h1>
                        <p class="house-description">@_houseSitter.Biography</p>

                        <hr class="section-divider"/>

                        <h3>Past experience</h3>
                        <p class="house-description">@_houseSitter.Experience</p>

                        <hr class="section-divider"/>

                        <div class="skills-section">
                            <h3>Skills</h3>
                            <div class="skills-container">
                                @foreach (var skill in _houseSitter.Skills)
                                {
                                    <div class="pill">@skill</div>
                                }
                            </div>
                        </div>

                        <hr class="section-divider"/>

                        <div>
                            @if (_houseSitter.Reviews! != null &&_houseSitter.Reviews!.Any())
                            {
                                <div class="reviews-section">
                                    <div class="reviews-container">
                                        @foreach (var review in _houseSitter.Reviews!)
                                        {
                                            <div class="card">
                                                <div class="card-img-container">
                                                    <img src="https://localhost:7134/Filesave/@review.Owner!.ProfilePicture.Split('.')[0]/@review.Owner.ProfilePicture.Split('.')[1]" 
                                                         class="card-img" alt="Reviewer Profile Picture">
                                                </div>

                                                <div class="card-body">
                                                    <div class="title-rating">
                                                        <h5>@review.Owner.Name</h5>
                                                        <div class="stars">
                                                            @foreach (var star in GetStars(review))
                                                            {
                                                                <span class="@star"></span>
                                                            }
                                                        </div>
                                                    </div>

                                                    <p class="card-text">@review.Comment</p>
                                                    <p class="card-text"><small class="text-muted">@review.Date</small></p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <p>No reviews</p>
                            }
                        </div>
                    </div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in to view this account.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


<style>

    @@font-face {
        font-family: 'LogoFont';
        src: url('fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    
    h3 {
        font-family: 'LogoFont', sans-serif;
        color: #3d3d3d;
    }

    .carousel-inner {
        border-radius: 15px; 
        overflow: hidden; 
        position: relative;
    }

    .carousel-item img {
        object-fit: contain; 
        width: 100%; 
        max-height: 32em;
        display: block;
    }


    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        filter: invert(52%) sepia(100%) saturate(1000%) hue-rotate(360deg) brightness(95%) contrast(90%);
    }


    .profile-container{
        padding: 0.85em;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .house-title {
        font-size: 2.5rem;
        color: #333;
        margin-bottom: 0.5em;
        font-family: 'LogoFont', sans-serif;
    }
    
    .skills-section {
        flex: 1;
    }

    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1em;
        margin-top: 1em;
    }

    .house-description {
        font-size: 1rem;
        color: #3d3d3d;
        margin-bottom: 1.5em;
        font-family: 'FuturaFont', sans-serif;
    }

    .section-divider {
        margin: 2em 0;
        border: 0;
        height: 1px;
        background-color: #ddd;
    }

    .pill {
        background-color: #ff7e5f;
        color: white;
        padding: 0.5em 1em;
        border-radius: 50px;
        font-size: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: 'FuturaFont', sans-serif;
    }

    .house-rules li {
        margin-bottom: 0.5em;
    }

    .not-authorized-container {
        text-align: center;
        margin-top: 5em;
        padding: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .not-authorized-container h2 {
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        font-size: 2em;
        margin-bottom: 0.5em;
    }

    .not-authorized-container p {
        font-family: 'FuturaFont', sans-serif;
        color: #333;
        font-size: 1.2em;
        margin-bottom: 1.5em;
    }

    .not-authorized-container .btn {
        font-size: 1em;
        padding: 0.75em 1.5em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;

    }

    .not-authorized-container .btn:hover {
        background-color: #feb47b;
    }

    .card {
        flex: 0 0 35em;
        align-items: center;
        flex-direction: row;
        border-radius: 12px;
        font-family: 'FuturaFont', sans-serif;
        box-shadow: 0 0 7px rgba(0, 0, 0, 0.1);
        border-style: none;
        margin: 0.75em;
        background-color: white;
        color: #3d3d3d;
        width: 35em;
    }

    .card-text{
        font-size: 1em;
        margin-bottom: 0;
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
    }

    .card-img-container{
        flex: 0 0 200px;
        height: 200px;
        margin: 1em;
        border-radius: 8px;
        overflow: hidden;
    }

    .card-img-container img{
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .card-body {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .card-text{
        margin-bottom: 0.15em;
    }

    .title-rating {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        align-content: center;
        gap: 1em;
        margin-bottom: 0.5em;

    }

    .title-rating h5 {
        margin-bottom: 0;
    }

    .stars {
        display: inline-flex;
        gap: 0.2em;
    }

    .fa-star {
        font-size: 1em;
    }

    .fa-star-half-alt {
        font-size: 1em;
        align-self: center;
    }

    .fa-star-o {
        font-size: 1em;
        color: lightgray;
    }

    .reviews-section {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 2rem 0;
        /*overflow: hidden; !* Keeps the section neat *!*/
    }

    .reviews-container {
        display: flex;
        gap: 1rem; /* Adds space between cards */
        overflow-x: auto; /* Enables horizontal scrolling */
        scroll-behavior: smooth; /* Smooth scrolling */
        padding: 1rem;
        scrollbar-width: thin; /* For Firefox */
        scrollbar-color: #ff7e5f transparent; /* For Firefox */
    }
    .reviews-container::-webkit-scrollbar {
        width: 8px;
        border-radius: 4px;
    }

    .reviews-container::-webkit-scrollbar-thumb {
        background: #ff7e5f;
        border-radius: 4px;
    }

    .reviews-container::-webkit-scrollbar-thumb:hover {
        background: #feb47b;
        border-radius: 4px;
    }

    .reviews-container::-webkit-scrollbar-track {
        background: transparent;
        border-radius: 4px;
    }
    
</style>

@code {
    
    [Parameter]
    public int ProfileId { get; set; } 

    private HouseSitterDto? _houseSitter;

    protected override async Task OnInitializedAsync()
    {
        await LoadHouseSitter();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadHouseSitter()
    {
        _houseSitter = await HouseSitterService.GetSingleAsync(ProfileId);
        _houseSitter.Reviews = SitterReviewService.GetAllReviewsForSitter(ProfileId).ToList();
    }
    
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    
    private List<string> GetStars(SitterReviewDto? review)
    {
        var stars = new List<string>();

        int fullStars = review.Rating;
        int emptyStars = 5 - fullStars;

        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }
    
    private ElementReference reviewsContainer;
    
    
}
