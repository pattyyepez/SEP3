@page "/view-my-account"
@layout MainLayout
@using DTOs.HouseOwner
@using DTOs.HouseSitter
@using HousePalClient.Auth
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHouseOwnerService HouseOwnerService
@inject IHouseSitterService HouseSitterService
@inject AuthenticationStateProvider AuthProvider


<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseOwner">
        <Authorized>
            @if (_houseOwnerProfile != null)
            {
                <div class="account-page-owner">
                    <div class="profile-container">
                        <div>
                            <img src="https://localhost:7134/Filesave/@_houseOwnerProfile.ProfilePicture.Split('.')[0]/@_houseOwnerProfile.ProfilePicture.Split('.')[1]" alt="Profile picture" class="profile-img"/>
                            <h1 class="user-name"> @_houseOwnerProfile.Name</h1>
                        </div>

                        <hr class="section-divider"/>

                        <div class="info-section">
                            <h2>Personal Information</h2>
                            <p>
                                <strong>Email:</strong> @_houseOwnerProfile.Email
                            </p>
                            <p>
                                <strong>Phone:</strong> @_houseOwnerProfile.Phone
                            </p>
                            <p>
                                <strong>Address:</strong> @_houseOwnerProfile.Address
                            </p>
                        </div>

                        <hr class="section-divider"/>

                        <div class="bio-section">
                            <h2>Biography</h2>
                            <p>@_houseOwnerProfile.Biography</p>
                        </div>

                        <hr class="section-divider"/>

                        <div class="action-buttons">
                            <button type="button" class="btn btn-primary" @onclick="EditAccountHouseOwner">Edit Account</button>
                            <button type="button" class="btn btn-secondary" @onclick="ShowConfirmation">Delete Account</button>
                        </div>
                    </div>
                </div>

                <div>
                    @if (_showConfirmationMessage)
                    {
                        <div class="modal-background">
                            <div class="modal-content">
                                <h3>Are you sure?</h3>
                                <p>Do you really want to delete your account? This action cannot be undone.</p>
                                <button class="btn btn-danger" @onclick="DeleteAccount">Yes</button>
                                <button class="btn btn-secondary" @onclick="CancelDelete">No</button>
                            </div>
                        </div>
                    }

                    @if (_showSuccessMessage)
                    {
                        <div class="alert alert-success" role="alert">
                            Your account has been deleted successfully!
                        </div>
                    }
                </div>
            }
            else
            {
                <p>Loading house owner profile...</p>
            }
        </Authorized>
    </AuthorizeView>

    <AuthorizeView Roles="HouseSitter">
        <Authorized>

            @if (_houseSitterProfile != null)
            {
                <div class="account-page-sitter">
                    <div class="profile-container">
                        <div>
                            <img src="https://localhost:7134/Filesave/@_houseSitterProfile.ProfilePicture.Split('.')[0]/@_houseSitterProfile.ProfilePicture.Split('.')[1]" alt="Profile picture" class="profile-img"/>
                            <h1 class="user-name"> @_houseSitterProfile.Name</h1>
                        </div>

                        <hr class="section-divider"/>

                        <div class="info-section">
                            <h2>Personal Information</h2>
                            <p>
                                <strong>Email:</strong> @_houseSitterProfile.Email
                            </p>
                            <p>
                                <strong>Phone:</strong> @_houseSitterProfile.Phone
                            </p>
                        </div>

                        <hr class="section-divider"/>

                        <div class="bio-section">
                            <h2>Biography</h2>
                            <p>@_houseSitterProfile.Biography</p>
                        </div>

                        <div class="bio-section">
                            <h2>Past experience</h2>
                            <p>@_houseSitterProfile.Experience</p>
                        </div>

                        <hr class="section-divider"/>

                        <h2>Skills</h2>
                        <div class="skills-container">
                            @foreach (var skill in _houseSitterProfile.Skills)
                            {
                                <div class="pill">@skill</div>
                            }
                        </div>

                        <hr class="section-divider"/>

                        <div class="carousel-container">
                            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-indicators">
                                    @for (int i = 0; i < _houseSitterProfile.Pictures.Count; i++)
                                    {
                                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                                class="@(i == 0 ? "active" : "")"
                                                aria-current="@(i == 0 ? "true" : "false")"
                                                aria-label="Slide @i">
                                        </button>
                                    }
                                </div>
                                <div class="carousel-inner">
                                    @foreach (var image in _houseSitterProfile.Pictures)
                                    {
                                        <div class="carousel-item @(_houseSitterProfile.Pictures.IndexOf(image) == 0 ? "active" : "")">
                                            <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Sitter Picture"/>
                                        </div>
                                    }
                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            </div>
                        </div>

                        <hr class="section-divider"/>

                        <div class="action-buttons">
                            @if (_houseOwnerProfile != null)
                            {
                                <button type="button" class="btn btn-primary" @onclick="EditAccountHouseOwner">Edit Account</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-primary" @onclick="EditAccountHouseSitter">Edit Account</button>
                            }
                            <button type="button" class="btn btn-secondary" @onclick="ShowConfirmation">Delete Account</button>
                        </div>
                    </div>

                    <div>
                        @if (_showConfirmationMessage)
                        {
                            <div class="modal-background">
                                <div class="modal-content">
                                    <h3>Are you sure?</h3>
                                    <p>Do you really want to delete your account? This action cannot be undone.</p>
                                    <button class="btn btn-danger" @onclick="DeleteAccount">Yes</button>
                                    <button class="btn btn-secondary" @onclick="CancelDelete">No</button>
                                </div>
                            </div>
                        }

                        @if (_showSuccessMessage)
                        {
                            <div class="alert alert-success" role="alert">
                                Your account has been deleted successfully!
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <p>Loading house sitter profile...</p>
            }
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in to view this account.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
    
    .carousel-inner img {
        width: 100%;
        height: 550px; 
        object-fit: cover; 
    }
    .account-page-owner {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
        box-sizing: border-box;
        background-color: white; 
    }
    
    .account-page-sitter {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
        box-sizing: border-box;
        background-color: white;
    }
    
    .account-page-owner .profile-container, .account-page-sitter .profile-container {
        max-width: 50vw;
        margin: 3em 0 3em 0;
        padding: 2em 2em;
        background-color: #fff2ef;
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
        font-family: 'FuturaFont', sans-serif;
    }

    .profile-img {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 0.5em;
    }
    
    .user-name {
        font-size: 2rem;
        color: #ff7e5f;
        margin: 0;
    }
    
    .info-section, .bio-section {
        text-align: left;
        margin-bottom: 1em;
    }

    h2 {
        text-align: center;
        color: #3d3d3d;
        font-family: 'LogoFont', sans-serif;
        font-size: 1.5rem;
        margin-bottom: 0.5em;
    }

    p {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        font-size: 1rem;
        margin: 0.5em 0;
    }

    .action-buttons {
        margin-top: 2em;
        display: flex;
        gap: 2em;
        justify-content: center;
    }
    
    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1em;
        margin-top: 1em;
    }
    
</style>

@code {
    private HouseOwnerDto? _houseOwnerProfile;
    private HouseSitterDto? _houseSitterProfile;
    private bool _showConfirmationMessage;
    private bool _showSuccessMessage;

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("HouseOwner"))
            {
                var ownerIdClaim = user.FindFirst("Id")?.Value;
                if (ownerIdClaim != null && int.TryParse(ownerIdClaim, out var ownerId))
                {
                    _houseOwnerProfile = await HouseOwnerService.GetSingleAsync(ownerId);
                }
            }
            else if (user.IsInRole("HouseSitter"))
            {
                var sitterIdClaim = user.FindFirst("Id")?.Value;
                if (sitterIdClaim != null && int.TryParse(sitterIdClaim, out var sitterId))
                {
                    _houseSitterProfile = await HouseSitterService.GetSingleAsync(sitterId);
                }
            }
        }
        else
        {
            Console.WriteLine("User is NOT authenticated.");
        }
    }


    private void EditAccountHouseOwner()
    {
        Navigation.NavigateTo("/edit-account-owner");
    }

    private void EditAccountHouseSitter()
    {
        Navigation.NavigateTo("/edit-account-sitter");
    }

    private async Task DeleteAccount()
    {
        if (_houseOwnerProfile != null)
        {
            await HouseOwnerService.DeleteAsync(_houseOwnerProfile.UserId);
            _showSuccessMessage = true;
        }
        else if (_houseSitterProfile != null)
        {
            await HouseSitterService.DeleteAsync(_houseSitterProfile.UserId);
            _showSuccessMessage = true;
        }

        HandleLogout();
    }

    private void ShowConfirmation()
    {
        _showConfirmationMessage = true;
        _showSuccessMessage = false;
    }

    private void CancelDelete()
    {
        _showConfirmationMessage = false;
    }

    private void HandleLogout()
    {
        if (AuthProvider is SimpleAuthProvider simpleAuthProvider)
        {
            simpleAuthProvider.Logout();
            Navigation.NavigateTo("/login", true);
        }
    }

}