@page "/view-listing/{listingId:int}"
@using System.Security.Claims
@using DTOs.Application
@using DTOs.HouseListing
@using DTOs.HouseProfile
@using DTOs.HouseReview
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseListingService HouseListingService
@inject IApplicationService ApplicationService
@inject AuthenticationStateProvider AuthProvider

<head>
    <title>Viewing house listing</title>
    <!-- Add Font Awesome CDN to your head tag -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
</head>

<CascadingAuthenticationState>
    <div class="view-listing-container">
        <AuthorizeView>
            <Authorized>
                @if (_houseListing == null)
                {
                    <p>Loading house listing details...</p>
                }
                else
                {
                    <div class="container house-profile">
                        <!-- Carousel Section -->
                        <div class="carousel-container">
                            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-indicators">
                                    @for (int i = 0; i < _houseListing.Profile!.Pictures!.Count; i++)
                                    {
                                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                                class="@(i == 0 ? "active" : "")"
                                                aria-current="@(i == 0 ? "true" : "false")"
                                                aria-label="Slide @i">
                                        </button>
                                    }
                                </div>
                                <div class="carousel-inner">
                                    @foreach (var image in _houseListing.Profile.Pictures)
                                    {
                                        <div class="carousel-item @(_houseListing.Profile.Pictures.IndexOf(image) == 0 ? "active" : "")">
                                            <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Image">
                                        </div>
                                    }
                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            </div>
                        </div>

                        <div class="listing-details">

                            <div class="text-content">
                                <!-- House Title and Location -->
                                <h1 class="house-title">@_houseListing.Profile.Title</h1>
                                <h2 class="house-location"><i class="fa-solid fa-location-dot" style="color: #ff7e5f;"></i> @_houseListing.Profile.City, @_houseListing.Profile.Region</h2>
                                <p class="house-description">@_houseListing.Profile.Description</p>
                            </div>


                            <div class="date-apply">
                                <div class="dates">
                                    <p>
                                        <strong>Start Date: </strong>@_houseListing.StartDate.ToString("dd/MM/yyyy")
                                    </p>
                                    <p>
                                        <strong>End Date: </strong>@_houseListing.EndDate.ToString("dd/MM/yyyy")
                                    </p>
                                    @if (_houseSitter)
                                    {
                                    @if (_hasApplied)
                                    { <button class="orange-button" @onclick="NavigateToApplications">You have already applied for this listing</button>

                                    }
                                    else
                                    {
                                    <button class="orange-button" @onclick="OnShowModalClick">Apply for Listing</button>
                                    }
                                    }
                                    
                                </div>
                            </div>


                        </div>

                        <hr class="section-divider"/>

                        <!-- House Chores & Amenities Section -->
                        <div class="chores-amenities-row">
                            <div class="chores-column">
                                <h3 class="house-sections">House Chores</h3>
                                <div class="chores-container">
                                    @foreach (var chore in _houseListing.Profile!.Chores!)
                                    {
                                        <div class="pill">@chore</div>
                                    }
                                </div>
                            </div>
                            <div class="vertical-divider"></div>
                            <div class="amenities-column">
                                <h3 class="house-sections">House Amenities</h3>
                                <div class="amenities-container">
                                    @foreach (var amenity in _houseListing.Profile!.Amenities!)
                                    {
                                        <div class="pill">@amenity</div>
                                    }
                                </div>
                            </div>
                        </div>

                        <hr class="section-divider"/>

                        <!-- House Rules Section -->
                        <h3 class="house-sections">House Rules</h3>
                        <ol class="house-rules">
                            @foreach (var rule in _houseListing.Profile!.Rules!)
                            {
                                <li>@rule</li>
                            }
                        </ol>

                        <hr class="section-divider"/>

                        <!-- Meet the Host Section -->
                        <h3 class="house-sections">Meet the Host</h3>
                        <div class="host-section">
                            <img src="https://localhost:7134/Filesave/@_houseListing.Profile!.Owner!.ProfilePicture!.Split('.')[0]/@_houseListing.Profile.Owner.ProfilePicture.Split('.')[1]" alt="Host Profile Picture" class="host-picture"/>
                            <p class="host-bio">@_houseListing.Profile.Owner.Biography</p>
                        </div>

                        <hr class="section-divider"/>

                        <!-- Review section -->
                        
                        <div class="house-average">
                            <h3 class="house-sections">House Rating:</h3>
                            <div class="average-stars">
                                @foreach (var star in GetAverageStars(_houseListing.Profile))
                                {
                                <span class="@star"></span>
                                }
                            </div>
                        </div>


                        <div>
                            @if (_houseListing.Profile.Reviews != null && _houseListing.Profile.Reviews.Any())
                            {
                                <div class="reviews-section">
                                    <div class="reviews-container">
                                        @foreach (var review in _houseListing.Profile.Reviews)
                                        {
                                            <div class="card">
                                                <div class="card-img-container">
                                                    <img src="https://localhost:7134/Filesave/@review.Sitter!.ProfilePicture.Split('.')[0]/@review.Sitter.ProfilePicture.Split('.')[1]" 
                                                         class="card-img" alt="Reviewer Profile Picture">
                                                </div>

                                                <div class="card-body">
                                                    <div class="title-rating">
                                                        <h5>@review.Sitter.Name</h5>
                                                        <div class="stars">
                                                            @foreach (var star in GetStars(review))
                                                            {
                                                                <span class="@star"></span>
                                                            }
                                                        </div>
                                                    </div>

                                                    <p class="card-text">@review.Comment</p>
                                                    <p class="card-text"><small class="text-muted">@review.Date</small></p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    </div>
                            }
                        </div>
                        
                    </div>
                }
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="HouseSitter">
            <Authorized>
                @if (!string.IsNullOrEmpty(_successMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @_successMessage
                    </div>
                }

                @if (_showModal)
                {
                    <div class="modal-background-apply">
                        <div class="modal-content-apply">
                            <h3 class="house-sections">Send Application</h3>
                            <form @onsubmit="CreateApplication">
                                <textarea @bind="_message" class="form-control" placeholder="Write your message..." required></textarea>
                                <!-- Display Message if exists -->
                                @if (!string.IsNullOrEmpty(_errorMessage))
                                {
                                <div class="alert alert-danger">@_errorMessage</div>
                                }
                                <button type="button" class="btn btn-secondary" @onclick="OnHideModalClick">Close</button>
                                <button type="submit" class="btn btn-primary">Send</button>
                            </form>
                        </div>
                    </div>
                }
            </Authorized>
        </AuthorizeView>
    </div>


    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in to view this house profile.</p>
                <button class="btn orange-button" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
</style>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;
    [Parameter] public int ListingId { get; set; }
    private bool _showConfirmationMessage;
    private bool _showSuccessMessage;
    private HouseListingDto? _houseListing;
    private bool _houseSitter;
    private bool _hasApplied;
    private bool _showModal;
    private string _message = string.Empty;
    private string _successMessage = string.Empty;
    private string _errorMessage = string.Empty;
    
    private int _sitterId;

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/");
    }
    private void NavigateToApplications()
    {
        Navigation.NavigateTo("/view-my-applications");
    }
    private (double Average, List<string> Stars) GetHouseAverage()
    {
        if (_houseListing?.Profile.Reviews == null || !_houseListing.Profile.Reviews.Any())
        {
            return (0, new List<string> { "fa-regular fa-star", "fa-regular fa-star", "fa-regular fa-star", "fa-regular fa-star", "fa-regular fa-star" });
        }

        double averageRating = _houseListing.Profile.Reviews.Average(r => r.Rating);

        int fullStars = (int)Math.Floor(averageRating);
        bool hasHalfStar = (averageRating % 1 >= 0.5);
        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        var stars = new List<string>();
        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        if (hasHalfStar)
        {
            stars.Add("fa-solid fa-star-half-alt");
        }
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return (averageRating, stars);
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        var authState = await AuthProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        _houseSitter = claims.Single(c => c.Type == ClaimTypes.Role).Value == "HouseSitter";
        if (_houseSitter)
        {
            string userIdAsString = claims.Single(c => c.Type == "Id").Value;
            _sitterId = int.Parse(userIdAsString);
        }

        await LoadHouseListingDetails();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadHouseListingDetails()
    {
        if (_houseSitter)
        {
            _houseListing = await HouseListingService.GetViewListing(ListingId, _sitterId);
            _hasApplied = _houseListing.Applications != null && _houseListing.Applications.Count != 0;
        }
        else
            _houseListing = await HouseListingService.GetViewListing(ListingId, null);
    }

    private void OnShowModalClick()
    {
        _showModal = true;
    }

    private void OnHideModalClick()
    {
        _showModal = false;
    }

    private async void CreateApplication()
    {
        if (_hasApplied)
        {
            return;
        }

        CreateApplicationDto application = new CreateApplicationDto
        {
            ListingId = ListingId,
            SitterId = _sitterId,
            Message = _message
        };
        await ApplicationService.AddAsync(application);
        _successMessage = "Your application was successfully sent!";
        _showModal = false;
        _hasApplied = true;
        Navigation.NavigateTo("/view-my-applications");
    }
    
    private List<string> GetAverageStars(HouseProfileDto profile)
    {
        double averageRating = profile.Reviews.Average(r => r.Rating);

        int fullStars = (int)Math.Floor(averageRating);
        bool hasHalfStar = (averageRating % 1 >= 0.5);
        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        var stars = new List<string>();
        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        if (hasHalfStar)
        {
            stars.Add("fa-solid fa-star-half-alt");
        }
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }
    
    private List<string> GetStars(HouseReviewDto? review)
    {
        var stars = new List<string>();

        int fullStars = review.Rating;
        int emptyStars = 5 - fullStars;

        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }

}