@page "/login"
@layout LoginLayout
@using System.Security.Claims
@using HousePalClient.Auth
@using HousePalClient.Components.Layout
@using Microsoft.AspNetCore.Components
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized Context="authContext">
            <div class="login-container">
                <div class="login-box">
                    <div class="login-fields">
                        <h2 class="subtitle">Welcome!</h2>
                        <EditForm Model="_loginModel" Context="formContext">
                            <DataAnnotationsValidator/>

                            @if (!string.IsNullOrEmpty(_errorMessage))
                            {
                            <div class="alert alert-danger">
                                @_errorMessage
                            </div>
                            }

                            <div class="form-group">
                                <label for="username">Username</label>
                                <InputText id="username" @bind-Value="_loginModel.Username" class="form-control" placeholder="Enter username"/>
                            </div>

                            <div class="form-group">
                                <label for="password">Password</label>
                                <InputText id="password" @bind-Value="_loginModel.Password" type="password" class="form-control" placeholder="Enter password"/>
                            </div>

                            <div class="button-group">
                                <button type="button" class="btn btn-primary" @onclick="HandleLoginClick">Log in</button>
                                <button type="button" class="btn btn-secondary" @onclick="HandleSignUpClick">Sign Up</button>
                            </div>
                        </EditForm>
                    </div>
                    <div class="welcome-message">
                        <img src="/images/logo.png" alt="Welcome Image" class="welcome-image"/>
                    </div>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>
</style>

@code {
    private readonly LoginModel _loginModel = new();
    private string? _errorMessage;

    protected override async void OnInitialized()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        string userRole = user.Claims.Single(c => c.Type == ClaimTypes.Role).Value;

        Navigation.NavigateTo(userRole == "HouseOwner" ? "/view-my-houses" : "/browse-listings");
    }

    private async Task HandleLoginClick()
    {
        try
        {
            _errorMessage = null; 

            await ((SimpleAuthProvider)AuthProvider).Login(_loginModel.Username, _loginModel.Password);
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is null || !user.Identity.IsAuthenticated)
            {
                _errorMessage = "Invalid username or password.";
                return;
            }

            string userRole = user.Claims.Single(c => c.Type == ClaimTypes.Role).Value;

            Navigation.NavigateTo(userRole == "HouseOwner" ? "/view-my-houses" : "/browse-listings");
        }
        catch
        {
            _errorMessage = "Login failed. Please try again.";
        }
    }


    private void HandleSignUpClick()
    {
        Console.WriteLine("Sign Up button clicked");
        Navigation.NavigateTo("/signup");
    }

    private class LoginModel
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }

}