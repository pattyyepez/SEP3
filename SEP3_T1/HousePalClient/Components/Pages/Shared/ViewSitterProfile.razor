@page "/view-sitter-profile/{profileId:int}"
@using DTOs.HouseSitter
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using DTOs.SitterReview
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@inject IHouseSitterService HouseSitterService
@inject ISitterReviewService SitterReviewService
@rendermode InteractiveServer

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider


    <!-- Add Font Awesome CDN to your head tag -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    
<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div class="profile-container">
                @if (_houseSitter == null)
                {
                    <p>Loading house sitter details...</p>
                }
                else
                {
                    <div class="container sitter-profile">
                        <!-- Carousel Section -->
                        <div class="carousel-container">
                            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-indicators">
                                    @for (int i = 0; i < _houseSitter.Pictures.Count; i++)
                                    {
                                        <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i"
                                                class="@(i == 0 ? "active" : "")"
                                                aria-current="@(i == 0 ? "true" : "false")"
                                                aria-label="Slide @i"></button>
                                    }
                                </div>
                                <div class="carousel-inner">
                                    @foreach (var image in _houseSitter.Pictures)
                                    {
                                        <div class="carousel-item @(_houseSitter.Pictures.IndexOf(image) == 0 ? "active" : "")">
                                            <img src="https://localhost:7134/Filesave/@image.Split('.')[0]/@image.Split('.')[1]" class="d-block w-100" alt="House Sitter Picture" />
                                        </div>
                                    }
                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            </div>
                        </div>

                        <h1 class="house-title">@_houseSitter.Name</h1>
                        <p class="house-description">@_houseSitter.Biography</p>

                        <hr class="section-divider"/>

                        <h3 class="house-sections">Past experience</h3>
                        <p class="house-description">@_houseSitter.Experience</p>

                        <hr class="section-divider"/>

                        <div class="skills-section">
                            <h3 class="house-sections">Skills</h3>
                            <div class="skills-container">
                                @foreach (var skill in _houseSitter.Skills)
                                {
                                    <div class="pill">@skill</div>
                                }
                            </div>
                        </div>

                        <hr class="section-divider"/>

                        <div>
                            @if (_houseSitter.Reviews! != null &&_houseSitter.Reviews!.Any())
                            {
                                <div class="reviews-section">
                                    <div class="reviews-container">
                                        @foreach (var review in _houseSitter.Reviews!)
                                        {
                                            <div class="card">
                                                <div class="card-img-container">
                                                    <img src="https://localhost:7134/Filesave/@review.Owner!.ProfilePicture.Split('.')[0]/@review.Owner.ProfilePicture.Split('.')[1]" 
                                                         class="card-img" alt="Reviewer Profile Picture">
                                                </div>

                                                <div class="card-body">
                                                    <div class="title-rating">
                                                        <h5>@review.Owner.Name</h5>
                                                        <div class="stars">
                                                            @foreach (var star in GetStars(review))
                                                            {
                                                                <span class="@star"></span>
                                                            }
                                                        </div>
                                                    </div>

                                                    <p class="card-text">@review.Comment</p>
                                                    <p class="card-text"><small class="text-muted">@review.Date</small></p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <p>No reviews</p>
                            }
                        </div>
                    </div>
                }
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in to view this account.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>


<style>
</style>

@code {
    
    [Parameter]
    public int ProfileId { get; set; } 

    private HouseSitterDto? _houseSitter;

    protected override async Task OnInitializedAsync()
    {
        await LoadHouseSitter();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadHouseSitter()
    {
        _houseSitter = await HouseSitterService.GetSingleAsync(ProfileId);
        _houseSitter.Reviews = SitterReviewService.GetAllReviewsForSitter(ProfileId).ToList();
    }
    
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    
    private List<string> GetStars(SitterReviewDto? review)
    {
        var stars = new List<string>();

        int fullStars = review.Rating;
        int emptyStars = 5 - fullStars;

        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }
    
    private ElementReference reviewsContainer;
    
    
}
