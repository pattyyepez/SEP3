@page "/view-all-house-profiles"
@using System.Security.Claims
@using DTOs.HouseProfile
@using HousePalClient.Components.Layout
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout;
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IHouseProfileService HouseProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page-container">
    <div class="signup-page-container">
        <h1>All House Profiles</h1>

        @if (houseProfiles == null || !houseProfiles.Any())
        {
            <p>No house profiles found.</p>
        }
        else
        {
            <div class="house-profile-list">
                @foreach (var profile in houseProfiles)
                {
                    <div class="house-profile-item">
                        @if (profile.Pictures != null && profile.Pictures.Any())
                        {
                            <img src="/images/HP1.jpg" alt="House Picture" class="house-profile-img" />
                        }
                        <p>@profile.Description</p>
                        <button type="button" class="btn btn-primary" @onclick="() => NavigateToDetails(profile.Id)">More Details</button>
                    </div>
                }
                <div class="house-profile-item">
                    <div @onclick="NavigateToCreate" class="plus"><i class="fa-solid fa-plus fa-2xl"></i></div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    
    @@font-face {
        font-family: 'LogoFont';
        src: url('http://localhost:[puerto]/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    h1 {
        text-align: center;
        color: #ff7e5f;
        margin-bottom: 1em;
        font-family: 'LogoFont', sans-serif;
    }



    .btn {
        font-size: 0.85em;
        padding: 0.375em 0.75em;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-list {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5em;
        justify-content: center;
    }

    .house-profile-item {
        width: 12em;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 0 0 1em 0;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-item div {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 95%;
        height: 95%;
    }
    
    .house-profile-img {
        width: 100%;
        height: auto;
        border-radius: 10px 10px 0 0;
    }

    p {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        margin: 1em;
    }
    
</style>

@code {
    private List<HouseProfileDto> houseProfiles = new List<HouseProfileDto>();
    private int userId = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }
        
        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        userId = int.Parse(userIdAsString);
        
        await LoadAllHouseProfiles();
    }

    private async Task LoadAllHouseProfiles()
    {
        houseProfiles = await Task.Run(() => HouseProfileService.GetAllByOwner(userId).ToList());
    }

    private void NavigateToDetails(int profileId)
    {
        Navigation.NavigateTo($"/view-house-profile/{profileId}");
    }
    
    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/create-house-profile");
    }
}
