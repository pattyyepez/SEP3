@page "/view-past-stays-hs"
@using System.Security.Claims
@using DTOs.Application
@using DTOs.HouseListing
@using DTOs.HouseReview
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@layout MainLayout
@rendermode InteractiveServer
@inject IHouseListingService HouseListingService
@inject IHouseReviewService HouseReviewService
@inject AuthenticationStateProvider AuthenticationStateProvider
<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseSitter">
        <Authorized>
            <div class="page-container">
                <h1>My Past Stays</h1>
                <div class="house-profile-list">

                    @if (_listings == null || !_listings.Any())
                    {
                        <p>No listings found.</p>
                    }
                    else
                    {
                        <div class="profile-container">
                            @foreach (var listing in _listings)
                            {
                                <div class="card wide-card">

                                    <div class="card-img-container">
                                        <img src="https://localhost:7134/Filesave/@listing.Profile!.Pictures![0].Split('.')[0]/@listing.Profile!.Pictures![0].Split('.')[1]" class="card-img" alt="...">
                                    </div>

                                    <div class="card-body">
                                        <div class="title-rating">
                                            <a href="https://localhost:7262/view-listing/@listing.Id" target="_blank">
                                                <h5>@listing.Profile.Title</h5>
                                            </a>
                                            <h5 class="card-text">
                                                <i class="fa-solid fa-location-dot"></i> @listing.Profile.Address, @listing.Profile.City, @listing.Profile.Region
                                            </h5>
                                        </div>


                                        <div class="button-container">
                                            @if (listing.Profile.Reviews != null && listing.Profile.Reviews.Any())
                                            {
                                                <p class="card-text contact" style="font-style: italic">
                                                    Your past review of @listing.Profile.Title:
                                                </p>

                                                <div class="card wide-card">
                                                    <div class="card-body">
                                                        <div class="stars">
                                                            @foreach (var star in GetStars(listing.Profile.Reviews.Single()))
                                                            {
                                                                <span class="@star"></span>
                                                            }
                                                        </div>
                                                        <p>@listing.Profile.Reviews.Single().Comment</p>
                                                        <p>@listing.Profile.Reviews.Single().Date</p>
                                                    </div>
                                                </div>

                                                <button class="orange-button" disabled="@(!listing.Profile.Reviews.First().Editable.Value)" @onclick="() => ShowEditReview(listing.Profile.Id)">Edit Review</button>
                                            }
                                            else
                                            {
                                                <p class="card-text contact" style="font-style: italic">
                                                    You have finished your stay at @listing.Profile.Title
                                                </p>

                                                <button class="orange-button" @onclick="() => ShowCreateReview(listing.Profile.Id)">Create Review</button>
                                            }
                                        </div>

                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>

            @if (_showModal)
            {
                <div class="modal-background">
                    <div class="modal-content">
                        @if (_creatingReview)
                        {
                            <form @onsubmit="CreateReview">

                                <h3>Create review for your stay at this location</h3>
                                <textarea @bind="_reviewComment" placeholder="Comment on your stay at this location" class="review-textarea" required></textarea>
                                <select @bind="_reviewRating" class="review-rating-select" required>
                                    <option value="" disabled selected>Rate the sitter (out of 5)</option>
                                    <option value="1">1 - Poor</option>
                                    <option value="2">2 - Fair</option>
                                    <option value="3">3 - Good</option>
                                    <option value="4">4 - Very Good</option>
                                    <option value="5">5 - Excellent</option>
                                </select>

                                <div class="button-group">
                                    <button type="submit" class="orange-button">Create Review</button>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelCreateReview">Close</button>
                                </div>
                                @* <button type="submit" class="orange-button">Create Review</button> *@
                                @* <button type="button" class="btn btn-secondary" @onclick="CancelCreateReview">Close</button> *@
                            </form>
                        }
                        else
                        {
                            <form @onsubmit="EditReview">

                                <h3>Create review for your stay at this location</h3>
                                <textarea @bind="_reviewComment" placeholder="Comment on your stay at this location" class="review-textarea" required></textarea>
                                <select @bind="_reviewRating" class="review-rating-select" required>
                                    <option value="" disabled selected>Rate the sitter (out of 5)</option>
                                    <option value="1">1 - Poor</option>
                                    <option value="2">2 - Fair</option>
                                    <option value="3">3 - Good</option>
                                    <option value="4">4 - Very Good</option>
                                    <option value="5">5 - Excellent</option>
                                </select>

                                <div class="button-group">
                                    <button type="submit" class="orange-button">Save Edit</button>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelEditReview">Close</button>
                                </div>
                            </form>
                        }
                    </div>
                </div>
            }
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;

    private int _sitterId;

    // private List<ApplicationDto>? _applications;
    private List<HouseListingDto>? _listings;

    private int _profileIdForReview;
    private string? _reviewComment = string.Empty;
    private int? _reviewRating;

    private bool _showModal;
    private bool _creatingReview;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _sitterId = int.Parse(userIdAsString);

        await LoadListings();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadListings()
    {
        PreloadService.Show();
        _listings = await Task.Run(() => HouseListingService.GetPastStaysHs(_sitterId).ToList());
        PreloadService.Hide();
    }

    private void ShowCreateReview(int profileId)
    {
        _profileIdForReview = profileId;
        _reviewComment = string.Empty;
        _reviewRating = null;
        _creatingReview = true;
        _showModal = true;
    }

    private void CancelCreateReview()
    {
        _showModal = false;
    }

    private void ShowEditReview(int profileId)
    {
        _profileIdForReview = profileId;
        var existingReview = _listings
            .Select(l => l.Profile)
            .FirstOrDefault(p => p.Id == profileId)?
            .Reviews.SingleOrDefault();

        if (existingReview != null)
        {
            _reviewComment = existingReview.Comment;
            _reviewRating = existingReview.Rating;
        }
        else
        {
            _reviewComment = string.Empty;
            _reviewRating = null;
        }

        _creatingReview = false;
        _showModal = true;
    }

    private void CancelEditReview()
    {
        _showModal = false;
    }

    private async Task CreateReview()
    {
        PreloadService.Show();
        CreateHouseReviewDto review = new CreateHouseReviewDto
        {
            ProfileId = _profileIdForReview,
            SitterId = _sitterId,
            Comment = _reviewComment,
            Rating = _reviewRating.Value
        };

        await HouseReviewService.AddAsync(review);
        await LoadListings();
        _showModal = false;
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task EditReview()
    {
        PreloadService.Show();
        UpdateHouseReviewDto review = new UpdateHouseReviewDto()
        {
            ProfileId = _profileIdForReview,
            SitterId = _sitterId,
            Comment = _reviewComment,
            Rating = _reviewRating.Value
        };

        await HouseReviewService.UpdateAsync(review);
        await LoadListings();
        _showModal = false;
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private List<string> GetStars(HouseReviewDto? review)
    {
        var stars = new List<string>();

        int fullStars = review.Rating;
        int emptyStars = 5 - fullStars;

        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }

}