@using System.Net.Http.Headers
@using DTOs
@using DTOs.HouseSitter
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc.Rendering
@layout LoginLayout
@inject NavigationManager Navigation
@inject IHouseSitterService Service
@inject ILogger<CreateHouseSitter> Logger
@inject HttpClient Http
@rendermode InteractiveServer
@page "/house-sitter-signup"

<div class="page-container-signup">
    <div class="signup-page-container">
        <h1>Create Your House Sitter Account</h1>

        <form class="house-sitter-form" @onsubmit="CreateSitter">
            <!-- Account Information Fields -->
            <div class="form-section">
                <h2>Account Information</h2>

                <label>Email:</label>
                <input type="email" class="form-control" placeholder="Enter your email" @bind="_email" required/>

                <label>Password:</label>
                <input type="password" class="form-control" placeholder="Create a password" @bind="_password" required/>

                <label>Confirm Password:</label>
                <input type="password" class="form-control" placeholder="Confirm your password" @bind="_confirmPassword" required/>
            </div>

            <!-- Personal Information Fields -->
            <div class="form-section">
                <h2>Personal Information</h2>

                <label>Name:</label>
                <input type="text" class="form-control" placeholder="Enter your name" @bind="_name" required/>

                <label>CPR Number:</label>
                <input type="text" class="form-control" placeholder="Enter your CPR number" @bind="_cpr" required/>

                <label>Phone Number:</label>
                <input type="tel" class="form-control" placeholder="Enter your phone number" @bind="_phone" required/>
            </div>

            <!-- Introduction Section -->
            <div class="form-section">
                <h2>Introduce Yourself</h2>

                <label>Short Introduction:</label>
                <textarea class="form-control" rows="4" placeholder="Write a brief introduction" @bind="_biography" required></textarea>

                <label>Relevant experiences:</label>
                <textarea class="form-control" rows="4" placeholder="Write a short summary of your past, relevant experiences" @bind="_experiences" required></textarea>

                <label>Upload a Profile Picture:</label>
                <InputFile OnChange="OnInputProfilePictureChange" accept="image/*" class="form-control"/>

                @if (!string.IsNullOrEmpty(_profilePictureUrl))
                {
                    <hr/>
                    <p>Uploaded picture:</p>
                    <img class="profile-picture" src="https://localhost:7134/Filesave/@_profilePictureUrl.Split('.')[0]/@_profilePictureUrl.Split('.')[1]" alt="Uploaded picture"/>
                    <hr/>
                }

                <label>Upload At Least 3 Pictures:</label>
                <InputFile OnChange="OnInputFileChange" accept="image/*" class="form-control" multiple/>

                @if (_pictures.Count != 0)
                {
                    <hr/>
                    <p>Uploaded pictures:</p>
                    <div class="uploaded-images-container">
                        @foreach (var picture in _pictures)
                        {
                            <img src="https://localhost:7134/Filesave/@picture.Split('.')[0]/@picture.Split('.')[1]" alt="Uploaded picture"/>
                        }
                    </div>
                }

            </div>

            <div class="form-section">
                <h2>Skills</h2>

                <ul>
                    @if (_skills != null && _skills.Any())
                    {
                        @foreach (var item in _skills)
                        {
                            <li>
                                <input type="checkbox" @bind="item.Selected"/>
                                <label>@item.Text</label>
                            </li>
                        }
                    }

                </ul>


            </div>

            <!-- Display Message if exists -->
            @if (!string.IsNullOrEmpty(_message))
            {
                <div class="alert alert-danger">@_message</div>
            }

            <!-- Submit Button -->
            <div class="button-group">
                <button type="submit" class="create-button">Create Account</button>
                <button type="button" @onclick="OpenCancelModal" class="btn btn-secondary">Cancel</button>
            </div>
        </form>
    </div>
</div>
@if (_showSuccessMessage)
{
    <div class="modal-background">
        <div class="modal-content">
            <h2>Hello, @_name!</h2>
            <p>Your account has been created successfully.</p>
            <button @onclick="RedirectToLogin" class="btn btn-primary">Go to Login</button>
        </div>
    </div>
}
@if (_showCancelConfirmation)
{
    <div class="modal-background">
        <div class="modal-content">
            <h2>Confirmation</h2>
            <p>Are you sure you want to cancel? All changes will be lost.</p>
            <div class="modal-actions">
                <button @onclick="ConfirmCancel" class="btn btn-primary">Yes</button>
                <button @onclick="CloseCancelModal" class="btn btn-secondary">No</button>
            </div>
        </div>
    </div>
}
<style>
</style>

@code {
    private string _email = string.Empty;
    private string _password = string.Empty;
    private string _confirmPassword = string.Empty;
    private string _name = string.Empty;
    private string _cpr = string.Empty;
    private string _phone = string.Empty;
    private string _biography = string.Empty;
    private string _experiences = string.Empty;
    private string _message = string.Empty;
    private string _profilePictureUrl = string.Empty;
    private bool _showSuccessMessage;
    private bool _showCancelConfirmation;

    private List<FileDto> _uploadResults = new();

    private MultiSelectList? _skills;
    List<string> _pictures = [];

    private void OpenCancelModal()
    {
        _showCancelConfirmation = true;
    }

    private void CloseCancelModal()
    {
        _showCancelConfirmation = false;
    }

    private void ConfirmCancel()
    {
        _email = string.Empty;
        _password = string.Empty;
        _confirmPassword = string.Empty;
        _name = string.Empty;
        _cpr = string.Empty;
        _phone = string.Empty;
        _biography = string.Empty;
        _experiences = string.Empty;
        _message = string.Empty;
        _profilePictureUrl = string.Empty;
        _pictures.Clear();


        _showSuccessMessage = false;
        _showCancelConfirmation = false;
        Navigation.NavigateTo("/");
    }


    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task CreateSitter()
    {
        _message = string.Empty;

        if (_password != _confirmPassword)
        {
            _message = "Passwords do not match.";
            return;
        }

        var createHouseSitterDto = new CreateHouseSitterDto()
        {
            Name = _name,
            Email = _email,
            Password = _password,
            ProfilePicture = _profilePictureUrl,
            CPR = _cpr,
            Phone = _phone,
            Experience = _experiences,
            Biography = _biography
        };

        createHouseSitterDto.Skills = [];
        foreach (var skill in _skills)
        {
            if (skill.Selected)
            {
                createHouseSitterDto.Skills.Add(skill.Text);
            }
        }

        createHouseSitterDto.Pictures = _pictures;

        try
        {
            await Service.AddAsync(createHouseSitterDto);
            _showSuccessMessage = true;
            _message = $"House Sitter created successfully!";
        }
        catch (Exception e)
        {
            var message = e.Message.Split('"').Length == 3 ? e.Message.Split('"')[1] : e.Message.Split('"')[4];
            _message = message.Remove(message.Length);
        }
    }

    private async Task OnInputProfilePictureChange(InputFileChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(_profilePictureUrl))
            await Http.DeleteAsync($"/Filesave/{_profilePictureUrl.Split('.')[0]}/{_profilePictureUrl.Split('.')[1]}");

        var upload = false;

        using var content = new MultipartFormDataContent();

        var file = e.GetMultipleFiles(1).FirstOrDefault();
        if (_uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(long.MaxValue));

                fileContent.Headers.ContentType =
                    new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                Logger.LogInformation(
                    $"{file.Name} not uploaded (Err: 6): {ex.Message}",
                    file.Name, ex.Message);

                _uploadResults.Add(
                    new()
                    {
                        FileName = file.Name,
                        ErrorCode = 6,
                        Uploaded = false
                    });
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/Filesave", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<FileDto>>();

            if (newUploadResults is not null)
            {
                _profilePictureUrl = newUploadResults.FirstOrDefault()!.StoredFileName!;
            }
        }
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var fileToDelete in _pictures)
        {
            if (!string.IsNullOrEmpty(fileToDelete))
            {
                await Http.DeleteAsync($"/Filesave/{fileToDelete.Split('.')[0]}/{fileToDelete.Split('.')[1]}");
            }
        }

        _pictures = [];
        foreach (var file in e.GetMultipleFiles(25))
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(1024 * 1024 * 10)); // 10MB max per file
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(fileContent, "files", file.Name);

            var response = await Http.PostAsync("/Filesave", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<IList<FileDto>>();
                _pictures.AddRange(result.Select(p => p.StoredFileName!).ToList());
            }
            else
            {
                Logger.LogError($"Failed to upload {file.Name}: {response.StatusCode}");
            }
        }
    }

    protected override async void OnInitialized()
    {
        _skills = new MultiSelectList(Service.GetAllSkills());
        await InvokeAsync(StateHasChanged);
    }

}