@page "/view-confirmed-stays-hs"
@using System.Security.Claims
@using DTOs.Application
@using DTOs.HouseListing
@using DTOs.HouseReview
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IApplicationService ApplicationService
@inject IHouseListingService ListingService
@inject IHouseOwnerService HouseOwnerService
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseSitter">
        <Authorized>
            <div class="page-container">
                <div class="signup-page-container">
                    <h1>Your Confirmed Stays:</h1>

                    @if (_applications == null || !_applications.Any())
                    {
                        <p>No stays found.</p>
                    }
                    else
                    { 
                        <div class="applications-section">
                            @foreach (var application in _applications)
                            {
                                <div class="card">

                                    <div class="card-img-container">
                                        <img src="https://localhost:7134/Filesave/@application.Listing!.Profile!.Pictures![0].Split('.')[0]/@application.Listing!.Profile!.Pictures![0].Split('.')[1]" class="card-img" alt="...">
                                    </div>

                                    <div class="card-body">
                                        <div class="title-rating">
                                            <a href="https://localhost:7262/view-listing/@application.ListingId" target="_blank"><h5>@application.Listing.Profile.Title</h5></a>
                                            <h5 class="card-text">
                                                <i class="fa-solid fa-location-dot"></i> @application.Listing.Profile.Address, @application.Listing.Profile.City, @application.Listing.Profile.Region
                                            </h5>
                                        </div>
                                        
                                        <p class="card-text" style="margin-top: 0.2em; font-style: italic">
                                            Your stay will take place from the @application.Listing.StartDate until the @application.Listing.EndDate
                                        </p>
                                        
                                        <br/>
                                        
                                        <p class="card-text" style="text-indent: 1em;">
                                            Contact @application.Listing.Profile.Owner.Name to organize your stay:
                                        </p>

                                        <p class="card-text" style="text-indent: 1em;">
                                            <i class="fa-solid fa-envelope"></i>   @application.Listing.Profile.Owner.Email
                                        </p>

                                        <p class="card-text" style="text-indent: 1em;">
                                            <i class="fa-solid fa-phone"></i>   @application.Listing.Profile.Owner.Phone
                                        </p>
                                        

                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>

    @@font-face {
        font-family: 'LogoFont';
        src: url('http://localhost:[puerto]/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    h1 {
        text-align: center;
        color: #ff7e5f;
        margin-bottom: 0.2em;
        font-family: 'LogoFont', sans-serif;
    }

    .btn {
        font-size: 0.85em;
        padding: 0.375em 0.75em;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-list {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5em;
        justify-content: center;
    }

    .house-profile-item {
        width: 15em;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 0 0 1em 0;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-item div {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 95%;
        height: 95%;
    }

    .house-profile-img {
        width: 100%;
        height: auto;
        border-radius: 10px 10px 0 0;
    }

    p {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        margin: 1em;
    }

    .plus {
        cursor: pointer;
    }

    .applications-section{
        padding: 0.85em;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .card-buttons {
        display: flex;
        justify-content: center;
        gap: 1.5em;
        margin-top: 0.5em;
        font-size: 1.15em;
    }

    .card {
        display: flex;
        align-items: center;
        flex-direction: row;
        border-radius: 12px;
        font-family: 'FuturaFont', sans-serif;
        box-shadow: 0 0 7px rgba(0, 0, 0, 0.1);
        border-style: none;
        margin: 0.75em;
        overflow: hidden;
        width: 60em;
        background-color: white;
        color: #3d3d3d;
    }

    .card.application{
        width: 40em;
        margin-bottom: 0;
    }

    .card-title {
        font-size: 1.3em;
    }

    .card-text{
        font-size: 1.15em;
        margin: 0;
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
    }

    .card-text p{
        line-height: 1.5;
    }

    .card a{
        color: #3d3d3d;
    }

    .card a:hover{
        color: blue;
    }

    .card.green a{
        color: white;
    }

    .card.green a:hover{
        color: blue;
    }

    .card.rejected{
        background-color: #dc3545;
        color: white;
    }

    .card.rejected .card-text{
        color: white;
    }

    .card.rejected a{
        color: white;
    }

    .card.rejected a:hover{
        color: blue;
    }

    .card.green{
        background-color: green;
        color: white;
    }

    .card.green .card-text{
        color: white;
    }

    .title-rating {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        align-content: center;
        gap: 1em;
        margin-bottom: 0.5em;

    }

    .title-rating h5 {
        margin-bottom: 0;
    }

    .card-img-container{
        flex: 0 0 200px;
        height: 200px;
        margin: 1em;
        border-radius: 8px;
        overflow: hidden;
    }

    .card-img-container img{
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .card-body {
        flex: 1;
        display: flex;
        flex-direction: column;
    }
    
    .card-body {
        margin-bottom: 0em;
    }

    .not-authorized-container {
        text-align: center;
        margin-top: 5em;
        padding: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .not-authorized-container h2 {
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        font-size: 2em;
        margin-bottom: 0.5em;
    }

    .not-authorized-container p {
        font-family: 'FuturaFont', sans-serif;
        color: #333;
        font-size: 1.2em;
        margin-bottom: 1.5em;
    }

    .not-authorized-container .btn {
        font-size: 1em;
        padding: 0.75em 1.5em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;

    }

    .not-authorized-container .btn:hover {
        background-color: #feb47b;
    }
</style>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;
    private List<ApplicationDto>? _applications;
    private int _userId;
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadAllApplications();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadAllApplications()
    {
        Console.WriteLine(_userId);
        var today = DateOnly.FromDateTime(DateTime.Today);
        
        _applications = new List<ApplicationDto>();
        _applications!.AddRange(
            await Task.Run(() => 
                ApplicationService.GetApplicationsByUserStatus(_userId, "Confirmed", true, true)
                    .Where(a => a.Listing.EndDate > today)
                    .ToList()));

        foreach (var application in _applications)
        {
            application.Listing.Profile.Owner = await HouseOwnerService.GetSingleAsync(application.Listing.Profile.OwnerId);
        }
    }

    private void NavigateToDetails(int listingId)
    {
        Navigation.NavigateTo($"/view-listing/{listingId}");
    }
    

    private async Task ConfirmApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Confirmed"
        };

        UpdateHouseListingDto updatedListing = new UpdateHouseListingDto
        {
            Id = application.ListingId,
            Status = "Closed"
        };

        await ApplicationService.UpdateAsync(updatedApplication);
        await ListingService.UpdateAsync(updatedListing);
        await LoadAllApplications();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CancelApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Canceled"
        };
        
        await ApplicationService.UpdateAsync(updatedApplication);
        await LoadAllApplications();
        await InvokeAsync(StateHasChanged);
    }
}