@page "/view-confirmed-stays-hs"
@using System.Security.Claims
@using DTOs.HouseListing
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@layout MainLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IHouseListingService ListingService
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseSitter">
        <Authorized>
            <div class="page-container">
                <h1>Your Confirmed Stays:</h1>

                @if (_listings == null || !_listings.Any())
                {
                    <p>No stays found.</p>
                }
                else
                {
                    <div class="profile-container">
                        @foreach (var listing in _listings)
                        {
                            <div class="card wide-card">

                                <div class="card-img-container">
                                    <img src="https://localhost:7134/Filesave/@listing.Profile!.Pictures![0].Split('.')[0]/@listing.Profile!.Pictures![0].Split('.')[1]" class="card-img" alt="...">
                                </div>

                                <div class="card-body">
                                    <div class="title-rating">
                                        <a href="https://localhost:7262/view-listing/@listing.Id" target="_blank">
                                            <h5>@listing.Profile.Title</h5>
                                        </a>
                                        <h5 class="card-text">
                                            <i class="fa-solid fa-location-dot"></i> @listing.Profile.Address, @listing.Profile.City, @listing.Profile.Region
                                        </h5>
                                    </div>

                                    <p class="card-text" style="margin-top: 0.2em; font-style: italic">
                                        Your stay will take place from the @listing.StartDate until the @listing.EndDate
                                    </p>

                                    <br/>

                                    <p class="card-text" style="text-indent: 1em;">
                                        Contact @listing.Profile!.Owner!.Name to organize your stay:
                                    </p>

                                    <p class="card-text" style="text-indent: 1em;">
                                        <i class="fa-solid fa-envelope"></i> @listing.Profile!.Owner!.Email
                                    </p>

                                    <p class="card-text" style="text-indent: 1em;">
                                        <i class="fa-solid fa-phone"></i> @listing.Profile.Owner.Phone
                                    </p>


                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;
    private List<HouseListingDto>? _listings;
    private int _userId;


    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadAllListings();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadAllListings()
    {
        PreloadService.Show();
        _listings = await Task.Run(() => ListingService.GetConfirmedStaysHs(_userId).ToList());
        PreloadService.Hide();
    }

}