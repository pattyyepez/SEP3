@page "/view-my-applications"
@using System.Security.Claims
@using DTOs.Application
@using DTOs.HouseListing
@using DTOs.HouseProfile
@using DTOs.HouseReview
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IApplicationService ApplicationService
@inject IHouseListingService ListingService
@inject IHouseReviewService HouseReviewService
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseSitter">
        <Authorized>
            <div class="page-container">
                <h1>My Applications:</h1>

                @if (_applications == null || !_applications.Any())
                {
                    <p>No applications found.</p>
                }
                else
                {
                    <div class="profile-container">
                        @foreach (var application in _applications)
                        {
                            <div class="card wide-card">

                                <div class="card-img-container">
                                    <img src="https://localhost:7134/Filesave/@application.Listing!.Profile!.Pictures![0].Split('.')[0]/@application.Listing!.Profile!.Pictures![0].Split('.')[1]" class="card-img" alt="...">
                                </div>

                                <div class="card-body">
                                    <div class="title-rating">
                                        <a href="https://localhost:7262/view-listing/@application.ListingId" target="_blank">
                                            <h5>@application.Listing.Profile.Title</h5>
                                        </a>
                                        <div>
                                            @if (application.Listing.Profile.Reviews != null && application.Listing.Profile.Reviews.Any())
                                            {
                                                @foreach (var star in GetStars(application.Listing.Profile))
                                                {
                                                    <span class="@star"></span>
                                                }
                                            }
                                            else
                                            {
                                                <span>No reviews available</span>
                                            }
                                        </div>
                                    </div>

                                    <p class="card-text">@application.Listing.StartDate - @application.Listing.EndDate</p>
                                    <p class="card-title" style="font-style: italic">@GetApplicationStatusText(application)</p>

                                    <div class="card @(application.Status is "Rejected" or "Canceled" ? "rejected" : (application.Status is "Approved" ? "green" : "")) application">
                                        <div class="card-body">
                                            <h5 class="card-title">@application.Message</h5>
                                            <p class="card-text">
                                                <small>@application.Date</small>
                                            </p>
                                        </div>
                                    </div>

                                    @if (application.Status == "Approved")
                                    {
                                        <div class="card-buttons">
                                            <button class="approve-button" @onclick="() => ConfirmApplication(application)">Confirm Stay</button>
                                            <button class="btn btn-danger" @onclick="async () => await CancelApplication(application)">Cancel Stay</button>
                                        </div>
                                    }

                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;
    private List<ApplicationDto>? _applications;
    private int _userId;

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            Console.WriteLine("Not authenticated");
            return;
        }

        IEnumerable<Claim> claims = user.Claims;
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _userId = int.Parse(userIdAsString);

        await LoadAllApplications();
        await InvokeAsync(StateHasChanged);
    }

    private List<string> GetStars(HouseProfileDto profile)
    {
        double averageRating = profile.Reviews.Average(r => r.Rating);

        int fullStars = (int)Math.Floor(averageRating);
        bool hasHalfStar = (averageRating % 1 >= 0.5);
        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        var stars = new List<string>();
        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));
        if (hasHalfStar)
        {
            stars.Add("fa-solid fa-star-half-alt");
        }

        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }

    private async Task LoadAllApplications()
    {
        PreloadService.Show();
        _applications = await Task.Run(() => ApplicationService.GetMyApplicationsSitter(_userId).ToList());
        PreloadService.Hide();
    }

    private async Task ConfirmApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Confirmed"
        };

        UpdateHouseListingDto updatedListing = new UpdateHouseListingDto
        {
            Id = application.ListingId,
            Status = "Closed"
        };

        await ApplicationService.UpdateAsync(updatedApplication);
        await ListingService.UpdateAsync(updatedListing);
        await LoadAllApplications();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CancelApplication(ApplicationDto application)
    {
        UpdateApplicationDto updatedApplication = new UpdateApplicationDto
        {
            ListingId = application.ListingId,
            SitterId = application.SitterId,
            Status = "Canceled"
        };

        var response = await ApplicationService.UpdateAsync(updatedApplication);
        response.Listing = application.Listing;
        await Task.Run(() => _applications.Remove(application));
        await Task.Run(() => _applications.Add(response));
        await InvokeAsync(StateHasChanged);
    }

    private string GetApplicationStatusText(ApplicationDto application)
    {
        return application.Status switch
        {
            "Pending" => "The owner of this listing is reviewing your application:",
            "Approved" => "Your application for this listing was approved: ",
            "Rejected" => "Your application for this listing has been rejected: ",
            "Canceled" => "You have canceled this stay. ",
            _ => string.Empty
        };
    }

}