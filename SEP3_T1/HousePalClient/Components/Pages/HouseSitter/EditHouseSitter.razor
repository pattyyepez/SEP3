@using System.Net.Http.Headers
@using DTOs
@using DTOs.HouseSitter
@using HousePalClient.Components.Layout
@using HousePalClient.Components.Pages.HouseOwner
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc.Rendering
@layout MainLayout
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject ILogger<EditHouseProfile> Logger
@inject IHouseSitterService HouseSitterService
@rendermode InteractiveServer
@page "/edit-account-sitter"


<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseSitter">
        <Authorized>
            <div class="page-container">
                <div class="signup-page-container">
                    <h1>Update Your Account</h1>

                    <form class="house-sitter-form" @onsubmit="EditSitter">
                        <!-- Personal Information Fields -->
                        <div class="form-section">
                            <h2>Personal Information</h2>

                            <label>Name:</label>
                            <input type="text" class="form-control" placeholder="Enter your name" @bind="_name" required/>

                            <label>CPR Number:</label>
                            <input type="text" class="form-control" placeholder="Enter your CPR number" @bind="_cpr" required/>

                            <label>Phone Number:</label>
                            <input type="tel" class="form-control" placeholder="Enter your phone number" @bind="_phone" required/>
                        </div>

                        <!-- Introduction Section -->
                        <div class="form-section">
                            <h2>Introduce Yourself</h2>

                            <label>Short Introduction:</label>
                            <textarea class="form-control" rows="4" placeholder="Write a brief introduction" @bind="_biography" required></textarea>

                            <label>Relevant experiences:</label>
                            <textarea class="form-control" rows="4" placeholder="Write a short summary of your past, relevant experiences" @bind="_experiences" required></textarea>

                            <label>Upload a Profile Picture:</label>
                            <InputFile OnChange="OnInputProfilePictureChange" accept="image/*" class="form-control"/>

                            @if (!string.IsNullOrEmpty(_profilePictureUrl))
                            {
                                <hr/>
                                <p>Uploaded picture:</p>
                                <img class="account-profile-img" src="https://localhost:7134/Filesave/@_profilePictureUrl.Split('.')[0]/@_profilePictureUrl.Split('.')[1]" alt="Uploaded picture"/>
                                <hr/>
                            }


                            <label>Upload At Least 3 Pictures:</label>
                            <InputFile OnChange="OnInputFileChange" accept="image/*" class="form-control" multiple/>

                            @if (_pictures.Count != 0)
                            {
                                <hr/>
                                <p>Uploaded pictures:</p>
                                <div class="uploaded-images-container">
                                    @foreach (var picture in _pictures)
                                    {
                                        <img src="https://localhost:7134/Filesave/@picture.Split('.')[0]/@picture.Split('.')[1]" alt="Uploaded picture"/>
                                    }
                                </div>
                            }


                        </div>

                        <div class="form-section">
                            <h2>Skills</h2>

                            <ul>
                                @foreach (var item in _skills)
                                {
                                    <li>
                                        <input type="checkbox" @bind="item.Selected"/> @* @onclick="(()=>handleClick(item))" *@
                                        <label>@item.Text</label>
                                    </li>
                                }
                            </ul>


                        </div>

                        <!-- Display Message if exists -->
                        @if (!string.IsNullOrEmpty(_message))
                        {
                            <div class="alert alert-danger">@_message</div>
                        }

                        <!-- Submit Button -->
                        <div class="button-group">
                            <button type="submit" class="orange-button">Update</button>
                            <button type="button" @onclick="OpenCancelModal" class="btn btn-secondary">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>

            @if (_showSuccessMessage)
            {
                <div class="modal-background">
                    <div class="modal-content">
                        <h2>Hello, @_name!</h2>
                        <p>Your account has been updated successfully.</p>
                        <button @onclick="RedirectToHome" class="btn btn-primary">Go to Home</button>
                    </div>
                </div>
            }

            @if (_showCancelConfirmation)
            {
            <div class="modal-background">
                <div class="modal-content">
                    <h2>Confirmation</h2>
                    <p>Are you sure you want to cancel? All changes will be lost.</p>
                    <div class="modal-actions">
                        <button @onclick="ConfirmCancel" class="btn btn-primary">Yes</button>
                        <button @onclick="CloseCancelModal" class="btn btn-secondary">No</button>
                    </div>
                </div>
            </div>
            }
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">Log In</button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private HouseSitterDto houseSitterProfile;
    private int _userId;

    private string _name = string.Empty;
    private string _cpr = string.Empty;
    private string _phone = string.Empty;

    private string _biography = string.Empty;
    private string _experiences = string.Empty;

    private string _message = string.Empty;
    private string _profilePictureUrl = string.Empty;
    private bool _showSuccessMessage;
    private bool _showCancelConfirmation;


    MultiSelectList? _skills;
    List<string> _pictures = [];

    private List<FileDto> _uploadResults = new();

    private void RedirectToHome()
    {
        Navigation.NavigateTo("/browse-listings");
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    
    private void OpenCancelModal()
    {
        _showCancelConfirmation = true;
    }

    private void CloseCancelModal()
    {
        _showCancelConfirmation = false;
    }

    private void ConfirmCancel()
    {
        _name = string.Empty;
        _cpr = string.Empty;
        _phone = string.Empty;
        _biography = string.Empty;
        _experiences = string.Empty;
        _message = string.Empty;
        _profilePictureUrl = string.Empty;
        _pictures.Clear();


        _showSuccessMessage = false;
        _showCancelConfirmation = false;
        Navigation.NavigateTo("/");
    }

    private async Task EditSitter()
    {
        _message = string.Empty;

        var updateHouseSitterDto = new UpdateHouseSitterDto()
        {
            UserId = _userId,
            Name = _name,
            ProfilePicture = _profilePictureUrl,
            CPR = _cpr,
            Phone = _phone,
            Experience = _experiences,
            Biography = _biography,
            Pictures = _pictures
        };

        updateHouseSitterDto.Skills = [];
        foreach (var skill in _skills)
        {
            if (skill.Selected)
            {
                updateHouseSitterDto.Skills.Add(skill.Text);
            }
        }

        try
        {
            await HouseSitterService.UpdateAsync(updateHouseSitterDto);
            _showSuccessMessage = true;
        }
        catch (Exception e)
        {
            var message = e.Message.Split('"').Length == 3 ? e.Message.Split('"')[1] : e.Message.Split('"')[4];
            _message = message.Remove(message.Length);
        }
    }

    private async Task OnInputProfilePictureChange(InputFileChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(_profilePictureUrl))
            await Http.DeleteAsync($"/Filesave/{_profilePictureUrl.Split('.')[0]}/{_profilePictureUrl.Split('.')[1]}");

        _uploadResults = new();
        long maxFileSize = long.MaxValue;
        var upload = false;

        using var content = new MultipartFormDataContent();

        var file = e.GetMultipleFiles(1).FirstOrDefault();
        if (_uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType =
                    new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                Logger.LogInformation(
                    $"{file.Name} not uploaded (Err: 6): {ex.Message}",
                    file.Name, ex.Message);

                _uploadResults.Add(
                    new()
                    {
                        FileName = file.Name,
                        ErrorCode = 6,
                        Uploaded = false
                    });
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/Filesave", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<FileDto>>();

            if (newUploadResults is not null)
            {
                _profilePictureUrl = newUploadResults.FirstOrDefault()!.StoredFileName!;
            }
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var fileToDelete in _pictures)
        {
            if (!string.IsNullOrEmpty(fileToDelete))
            {
                await Http.DeleteAsync($"/Filesave/{fileToDelete.Split('.')[0]}/{fileToDelete.Split('.')[1]}");
            }
        }

        _pictures = [];
        foreach (var file in e.GetMultipleFiles(25))
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(1024 * 1024 * 10)); // 10MB max per file
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            content.Add(fileContent, "files", file.Name);

            var response = await Http.PostAsync("/Filesave", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<IList<FileDto>>();
                _pictures.AddRange(result.Select(p => p.StoredFileName!).ToList());
            }
            else
            {
                Logger.LogError($"Failed to upload {file.Name}: {response.StatusCode}");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _skills = new MultiSelectList(HouseSitterService.GetAllSkills());
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("HouseSitter"))
            {
                var sitterIdClaim = user.FindFirst("Id")?.Value;
                if (sitterIdClaim != null && int.TryParse(sitterIdClaim, out var sitterId))
                {
                    houseSitterProfile = await HouseSitterService.GetSingleAsync(sitterId);
                    _profilePictureUrl = houseSitterProfile.ProfilePicture!;
                    _cpr = houseSitterProfile.CPR!;
                    _phone = houseSitterProfile.Phone!;
                    _name = houseSitterProfile.Name!;
                    _experiences = houseSitterProfile.Experience!;
                    _biography = houseSitterProfile.Biography!;
                    _pictures = houseSitterProfile.Pictures!;

                    foreach (var skill in _skills)
                    {
                        if (houseSitterProfile.Skills!.Contains(skill.Text))
                        {
                            skill.Selected = true;
                        }
                    }

                    _userId = sitterId;
                }
            }
        }
        else
        {
            Console.WriteLine("User is NOT authenticated.");
        }
    }

}