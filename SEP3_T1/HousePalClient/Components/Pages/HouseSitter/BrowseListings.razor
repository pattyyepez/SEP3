@page "/browse-listings"
@using System.Security.Claims
@using DTOs.HouseListing
@using DTOs.HouseReview
@using HousePalClient.Components.Layout
@using HousePalClient.ServiceContracts
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Mvc.Rendering
@using Services
@layout MainLayout
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IHouseListingService HouseListingService
@inject IHouseProfileService HouseProfileService
@inject IHouseReviewService HouseReviewService
@inject AuthenticationStateProvider AuthenticationStateProvider

<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<CascadingAuthenticationState>
    <AuthorizeView Roles="HouseSitter">
        <Authorized>
            <div class="page-container">

                <div class="filter-title">
                    <h2>Find a House to Sit:</h2>
                    <button type="button" class="btn btn-primary filter"
                            @onclick="OnShowModalClick">
                        <i
                            class="fa-solid fa-sliders">
                        </i> Filter
                    </button>
                </div>

                <div class="house-profile-list">

                    @if (_houseListings == null || !_houseListings.Any())
                    {
                        <p>No listings found.</p>
                    }
                    else
                    {
                        @foreach (var listing in _houseListings)
                        {
                            <div class="house-profile-item">
                                @if (listing.Profile!.Pictures != null && listing.Profile.Pictures.Any())
                                {
                                    <img
                                        src="https://localhost:7134/Filesave/@listing.Profile.Pictures[0].Split('.')[0]/@listing.Profile.Pictures[0].Split('.')[1]"
                                        alt="House Picture" class="house-profile-img"/>
                                }

                                @* <div class="title-rating"> *@
                                <h3>
                                    <a href="https://localhost:7262/view-listing/@listing.Id" target="_blank"> @listing.Profile.Title</a>
                                </h3>
                                <div class="stars">
                                    @if (listing.Profile.Reviews != null && listing.Profile.Reviews.Any())
                                    {
                                        @foreach (var star in GetStars(listing.Profile.Reviews))
                                        {
                                            <span class="@star"></span>
                                        }
                                    }
                                    else
                                    {
                                        <div>
                                            <span>No reviews</span>
                                        </div>
                                    }
                                </div>

                                <p>@listing.StartDate.ToString("dd/M/yyyy") - @listing.EndDate.ToString("dd/M/yyyy")</p>
                                <p>@listing.Profile.Region, @listing.Profile.City</p>
                            </div>
                        }
                    }
                </div>
            </div>

            @if (_showModal)
            {
                <div class="modal-background">
                    <div class="modal-content">

                        <button class="close-button" @onclick="OnHideModalClick">
                            <i
                                class="fa-solid fa-xmark">
                            </i>
                        </button>

                        <h2>Filter Listings</h2>
                        <form @onsubmit="Filter">


                            <div class="form-group">
                                <label for="region">Region</label>
                                <input id="region" class="form-control" @bind="_region"
                                       placeholder="Enter Region"/>
                            </div>

                            <div class="form-group">
                                <label for="city">City</label>
                                <input id="city" class="form-control" @bind="_city"
                                       placeholder="Enter City"/>
                            </div>

                            <hr class="section-divider"/>

                            <div class="form-group date-group">
                                <label for="startDate">Start Date</label>
                                <input
                                    type="date"
                                    id="startDate"
                                    name="listing-start"
                                    placeholder="dd-mm-yyyy"
                                    class="form-control"
                                    @bind-value="@StartDate"
                                    min="@_minDateStart.ToString("yyyy-MM-dd")"
                                    max="@_maxDateStart.ToString("yyyy-MM-dd")"/>
                            </div>

                            <div class="form-group date-group">
                                <label for="endDate">End Date</label>
                                <input
                                    type="date"
                                    id="endDate"
                                    name="listing-end"
                                    placeholder="dd-mm-yyyy"
                                    class="form-control"
                                    @bind-value="@EndDate"
                                    min="@_minDateEnd.ToString("yyyy-MM-dd")"
                                    max="@_maxDateEnd.ToString("yyyy-MM-dd")"/>
                            </div>

                            <hr class="section-divider"/>

                            <h3>Amenities</h3>
                            <div class="form-group checkbox">
                                @if (_amenities is not null)
                                {
                                    <div class="amenities-container">
                                        @foreach (var amenity in _amenities)
                                        {
                                            <div class="pill">
                                                <input type="checkbox" id="@amenity"
                                                       @bind="amenity.Selected"/>
                                                <label for="@amenity">@amenity.Text</label>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            <h3>Chores</h3>
                            <div class="form-group checkbox">
                                @if (_chores is not null)
                                {
                                    <div class="amenities-container">
                                        @foreach (var chore in _chores)
                                        {
                                            <div class="pill">
                                                <input type="checkbox" id="@chore"
                                                       @bind="chore.Selected"/>
                                                <label for="@chore">@chore.Text</label>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            <hr class="section-divider"/>

                            <button class="btn btn-success">
                                Find
                                listings
                            </button>

                        </form>


                    </div>
                </div>
            }
        </Authorized>
    </AuthorizeView>
    <AuthorizeView>
        <NotAuthorized>
            <div class="not-authorized-container">
                <h2>You must be logged in to view this page.</h2>
                <p>Please log in.</p>
                <button class="btn btn-primary" @onclick="NavigateToLogin">
                    Log
                    In
                </button>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<style>

    @@font-face
    {
        font-family: 'LogoFont';
        src: url('http://localhost:[puerto]/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    @@font-face
    {
        font-family: 'FuturaFont';
        src: url('fonts/futura.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .amenities-container
    {
        display: flex;
        flex-wrap: wrap;
        gap: 1em;
        margin-bottom: 0.5em;
    }

    h3
    {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        margin: 0.3em;
        font-size: 1.5rem;
    }

    .pill
    {
        background-color: #ff7e5f;
        color: white;
        padding: 0.5em 1em;
        border-radius: 50px;
        font-size: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-img
    {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 10px 10px 0 0;
        display: block;
    }


    .filter-title
    {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        justify-content: space-between;
        margin-bottom: 1em;
    }


    h2
    {
        color: #ff7e5f;
        margin-bottom: 1rem;
        font-family: 'LogoFont', sans-serif;
    }

    .btn
    {
        font-size: 0.85em;
        padding: 0.375em 0.75em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        border: none;
    }

    .house-profile-list
    {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5em;
        justify-content: center;
        margin-bottom: 1em;
    }

    .house-profile-item
    {
        width: 20em;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        padding: 0 0 1em 0;
        font-family: 'FuturaFont', sans-serif;
    }

    .house-profile-item a
    {
        color: #3d3d3d;
    }

    .house-profile-item a:hover
    {
        color: blue;
    }
    
    /*.house-profile-item div*/
    /*{*/
    /*    display: flex;*/
    /*    justify-content: start;*/
    /*    align-items: center;*/
    /*    width: 95%;*/
    /*    height: 95%;*/
    /*}*/
    
    p
    {
        font-family: 'FuturaFont', sans-serif;
        color: #3d3d3d;
        margin: 0.2em;
    }

    .page-container
    {
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
        overflow-y: hidden;
        margin: 0 auto;
        height: 100%;
        position: relative;
    }


    .modal-background
    {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 4000;
        overflow: hidden;
    }


    .modal-content
    {
        margin-top: 1em;
        position: relative;
        background-color: #fff;
        padding: 2em;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 450px;
        width: 100%;
        z-index: 5000;

        max-height: 90vh;
        overflow-y: auto;
    }


    .btn.btn-primary.filter
    {
        background-color: #ff7e5f;
        font-size: 0.55em;
        border-style: none;
    }

    .btn.btn-primary.filter:hover
    {
        background-color: #feb47b;
    }

    .close-button
    {
        position: absolute;
        top: 0.5em;
        right: 0.5em;
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #333;
        cursor: pointer;
    }

    .close-button:hover
    {
        color: #ff7e5f;
    }

    .filter-title
    {
        font-size: 2rem;
        color: #333;
        text-align: center;
        margin-bottom: 1.5em;
    }

    .filter-form
    {
        display: flex;
        flex-direction: column;
        gap: 1.5em;
    }

    .form-group
    {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        font-family: 'FuturaFont', sans-serif;
    }

    .form-group.checkbox
    {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5em;
    }

    .form-control
    {
        padding: 0.5em;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        outline: none;
        margin-bottom: 0.5em;
    }

    .form-control:focus
    {
        border-color: #ff7e5f;
        box-shadow: 0 0 5px rgba(255, 126, 95, 0.5);
    }

    .date-group
    {
        display: flex;
        flex-direction: column;
    }

    .not-authorized-container
    {
        text-align: center;
        margin-top: 5em;
        padding: 2em;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .not-authorized-container h2
    {
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        font-size: 2em;
        margin-bottom: 0.5em;
    }

    .not-authorized-container p
    {
        font-family: 'FuturaFont', sans-serif;
        color: #333;
        font-size: 1.2em;
        margin-bottom: 1.5em;
    }

    .not-authorized-container .btn
    {
        font-size: 1em;
        padding: 0.75em 1.5em;
        font-family: 'FuturaFont', sans-serif;
        background-color: #ff7e5f;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .not-authorized-container .btn:hover
    {
        background-color: #feb47b;
    }

    .stars {
        display: inline-flex;
        gap: 0.2em;
    }

    .title-rating {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        align-content: center;
        gap: 1em;
        margin-bottom: 0.5em;
    }

    .fa-star {
        font-size: 1em;
    }

    .fa-star-half-alt {
        font-size: 1em;
        align-self: center;
    }

    .fa-star-o {
        font-size: 1em;
        color: lightgray;
    }

</style>

@code {
    [Inject] private PreloadService PreloadService { get; set; } = default!;

    private bool _showModal;
    private string _region = string.Empty;
    private string _city = string.Empty;
    private readonly DateTime _minDateStart = DateTime.Today;
    private readonly DateTime _maxDateStart = DateTime.Today.AddYears(5);
    private DateTime _minDateEnd = DateTime.Today;
    private DateTime _maxDateEnd = DateTime.Today.AddYears(5);
    private DateTime? _gottenStart;
    private DateTime? _gottenEnd;

    private MultiSelectList _amenities = default!;
    private MultiSelectList _chores = default!;

    private List<HouseListingDto>? _houseListings;

    // Property for Start Date
    private DateTime? StartDate
    {
        get => _gottenStart;
        set
        {
            _gottenStart = value;
            if (value < DateTime.Today) _gottenStart = DateTime.Today;
            _minDateEnd = _gottenStart!.Value;
            if (_gottenEnd.HasValue && _gottenStart.HasValue && _gottenEnd < _gottenStart)
            {
                _gottenEnd = _gottenStart;
            }
        }
    }

    private void NavigateToLogin()

    {
        Navigation.NavigateTo("/login");
    }

    // Property for End Date
    private DateTime? EndDate
    {
        get => _gottenEnd;
        set
        {
            _gottenEnd = value;
            if (value < _minDateEnd) _gottenEnd = _minDateEnd;
        }
    }

    private void OnShowModalClick()
    {
        _showModal = true;
    }

    private void OnHideModalClick()
    {
        _showModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show();
        _houseListings = new List<HouseListingDto>();
        // var authState = await AuthenticationStateProvider
        //     .GetAuthenticationStateAsync();
        // var user = authState.User;
        //
        // if (user.Identity is null || !user.Identity.IsAuthenticated)
        // {
        //     Console.WriteLine("Not authenticated");
        //     return;
        // }
        //
        // IEnumerable<Claim> claims = user.Claims;
        // string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        _amenities = new MultiSelectList(HouseProfileService.GetAllAmenities());
        _chores = new MultiSelectList(HouseProfileService.GetAllChores());
        await LoadAllHouseListings();
        await InvokeAsync(StateHasChanged);
        PreloadService.Hide();
    }

    private async Task LoadAllHouseListings()
    {
        var allListings = await Task.Run(() => HouseListingService.GetAllByOwnerStatus(0, "Open", false, true).ToList());
        var today = DateOnly.FromDateTime(DateTime.Today);

        _houseListings = allListings
            .Where(listing => listing.StartDate > today)
            .ToList();

        foreach (var listing in _houseListings)
        {
            listing.Profile.Reviews = HouseReviewService.GetAllReviewsForProfile(listing.Profile.Id).ToList();
        }
    }


    private void NavigateToDetails(int listingId)
    {
        Navigation.NavigateTo($"/view-listing/{listingId}");
    }

    private async void Filter()
    {
        PreloadService.Show();
        FilteredHouseListingsDto filter = new FilteredHouseListingsDto
        {
            City = _city,
            Region = _region,
            StartDay = _gottenStart?.Day,
            StartMonth = _gottenStart?.Month,
            StartYear = _gottenStart?.Year,
            EndDay = _gottenEnd?.Day,
            EndMonth = _gottenEnd?.Month,
            EndYear = _gottenEnd?.Year,
        };

        filter.Chores = [];
        if (_chores.Any())
            foreach (var chore in _chores)
            {
                if (chore.Selected)
                {
                    filter.Chores.Add(chore.Text);
                }
            }

        filter.Amenities = [];
        foreach (var amenity in _amenities)
        {
            if (amenity.Selected)
            {
                filter.Amenities.Add(amenity.Text);
            }
        }

        _houseListings = HouseListingService.GetFilteredListings(filter).ToList();
        foreach (var listing in _houseListings)
        {
            listing.Profile.Reviews = HouseReviewService.GetAllReviewsForProfile(listing.Profile.Id).ToList();
        }
        await InvokeAsync(StateHasChanged);
        _showModal = false;
        PreloadService.Hide();
    }

    private List<string> GetStars(List<HouseReviewDto>? reviews)
    {
        var stars = new List<string>();

        double averageRating = reviews.Select(r => r.Rating).Average();
        int fullStars = (int)Math.Floor(averageRating);
        bool hasHalfStar = (averageRating % 1 >= 0.5);
        int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

        stars.AddRange(Enumerable.Repeat("fa-solid fa-star", fullStars));

        if (hasHalfStar)
        {
            stars.Add("fa-solid fa-star-half-alt");
        }

        stars.AddRange(Enumerable.Repeat("fa-regular fa-star", emptyStars));

        return stars;
    }

}