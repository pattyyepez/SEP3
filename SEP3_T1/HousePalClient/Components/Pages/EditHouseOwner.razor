@using System.Net.Http.Headers
@using DTOs
@using DTOs.HouseOwner
@using HousePalClient.Components.Layout
@using Microsoft.AspNetCore.Components
@using Services
@layout LoginLayout
@inject NavigationManager Navigation
@inject IHouseOwnerService HouseOwnerService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<FileUploadTest> Logger
@inject HttpClient Http
@rendermode InteractiveServer
@page "/edit-account-owner"


<div class="page-container">
    <div class="signup-page-container">
        <h1>Create Your House Owner Account</h1>

        <form class="house-owner-form" @onsubmit="CreateOwner">
            <!-- Account Information Fields -->
            @* <div class="form-section"> *@
            @*     <h2>Account Information</h2> *@
            @* *@
            @*     <label>Email:</label> *@
            @*     <input type="email" class="form-control" placeholder="email" @bind="email" required/> *@
            @* *@
            @*     <label>Password:</label> *@
            @*     <input type="password" class="form-control" placeholder="Create a password" @bind="password" required/> *@
            @* *@
            @*     <label>Confirm Password:</label> *@
            @*     <input type="password" class="form-control" placeholder="Confirm your password" @bind="confirmPassword" required/> *@
            @* </div> *@

            <!-- Personal Information Fields -->
            <div class="form-section">
                <h2>Personal Information</h2>

                <label>Name:</label>
                <input type="text" class="form-control" placeholder="Enter your name" @bind="_name" required/>

                <label>CPR Number:</label>
                <input type="text" class="form-control" placeholder="Enter your CPR number" @bind="_cpr" required/>

                <label>Phone Number:</label>
                <input type="tel" class="form-control" placeholder="Enter your phone number" @bind="_phone" required/>

                <label>Home Address:</label>
                <input type="text" class="form-control" placeholder="Enter your address" @bind="_address" required/>
            </div>

            <!-- Introduction Section -->
            <div class="form-section">
                <h2>Introduce Yourself</h2>

                <label>Short Introduction:</label>
                <textarea class="form-control" rows="4" placeholder="Write a brief introduction" @bind="_biography" required></textarea>
                <label>Upload a Profile Picture:</label>
                <InputFile OnChange="OnInputProfilePictureChange" accept="image/*" class="form-control"/>

                @if (!string.IsNullOrEmpty(_profilePictureUrl))
                {
                    <hr/>
                    <p>Uploaded picture:</p>
                    <img src="https://localhost:7134/Filesave/@_profilePictureUrl.Split('.')[0]/@_profilePictureUrl.Split('.')[1]" alt="Uploaded picture"/>
                }
            </div>

            <!-- Display Message if exists -->
            @if (!string.IsNullOrEmpty(_message))
            {
                <div>
                    <label>@_message</label>
                </div>
            }

            <!-- Submit Button -->
            <button type="button" @onclick="CreateOwner" class="btn btn-primary">Update Account</button>
        </form>
    </div>
</div>
@if (_showSuccessMessage)
{
    <div class="modal-background">
        <div class="modal-content">
            <h2>Hello, @_name!</h2>
            <p>Your account has been updated successfully.</p>
            <button @onclick="RedirectToLogin" class="btn btn-primary">Go to Login</button>
        </div>
    </div>
}
<style>
    @@font-face {
        font-family: 'LogoFont';
        src: url(    'http://localhost:[puerto]/fonts/logo-font.ttf'
        ) format('truetype');
        font-weight: normal;
        font-style: normal;
    }


    h2
    {
        font-size: 3em;
        color: #ff7e5f;
        font-family: 'LogoFont', sans-serif;
        align-self: center;
        margin-bottom: 0.5em;
    }

    label
    {
        color: #222222;
        font-family: Futura;
        margin-bottom: 0.1em;
    }

    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        width: 100vw;
        position: relative;
        overflow: hidden;
        animation: rotateBackground 25s infinite; /* Apply animation to the main container */
        background-size: cover;
        background-position: center;
    }

    .login-box {
        display: flex;
        width: 800px;
        height: 400px;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
        background-color: rgba(255, 255, 255, 0.85); /* Slightly transparent to see the background */
    }

    .login-fields {
        font-family: Futura;
        color: #222222;
        width: 50%;
        padding: 3em;
        background-color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .welcome-message {
        width: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        background: linear-gradient(135deg, #ff7e5f, #feb47b); /* Coral/Orange Gradient */
        color: white;
        flex-direction: column;
    }

    .welcome-message h1 {
        font-size: 2rem;
        font-family: "Canela Text";
        margin: 0;
    }

    .welcome-image {
        width: 250px; /* Adjust as needed */
        height: auto;
        /*margin-bottom: 1em;*/
    }

    .form-group {
        margin-bottom: 1.5em;
    }

    .form-control {
        font-size: 1rem;
        padding: 0.375em 0.75em;
    }

    .button-group {
        display: flex;
        justify-content: center;
        gap: 1em; /* Space between buttons */
    }

    .btn {
        font-size: 1rem;
        padding: 0.375em 0.75em;
    }

    @@keyframes rotateBackground {
        0% { background-image: url('http://localhost:[puerto]/images/loginBackgrounds/1.jpg'); }
        25% { background-image: url('http://localhost:[puerto]/images/loginBackgrounds/2.jpg'); }
        50% { background-image: url('http://localhost:[puerto]/images/loginBackgrounds/3.jpg'); }
        75% { background-image: url('http://localhost:[puerto]/images/loginBackgrounds/4.jpg'); }
        100% { background-image: url('http://localhost:[puerto]/images/loginBackgrounds/1.jpg'); }
    }

    @@font-face {
        font-family: 'LogoFont';
        src: url('http://localhost:[puerto]/fonts/logo-font.ttf') format('truetype');
        font-weight: normal;
        font-style: normal;
    }

    .page-container
    {
        display: flex;
        flex-direction: column;
        align-items: center;
        min-height: 100vh;
        min-width: 100vw;
        background: linear-gradient(150deg, #ff7e5f, #feb47b);

    }

    .signup-page-container {
        max-width: 800px;
        margin: 63em 0 3em 0;
        padding: 2em 2em;
        background-color: #ffffff;
        border-radius: 15px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        color: #ff7e5f;
        margin-bottom: 1em;
        font-family: 'LogoFont', sans-serif;
    }

    h2 {
        text-align: center;
        color: #3d3d3d;
        font-family: Futura;
        font-size: 1.7rem;
    }

    .form-section {
        margin-bottom: 2em;
        padding: 1em;
        border-radius: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .form-control {
        width: 100%;
        padding: 0.75em;
        margin-top: 0.5em;
        margin-bottom: 1.5em;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
    }

    input
    {
        font-family: Futura;
    }

    label
    {
        font-family: Futura;
        color: #3d3d3d;
    }

    textarea.form-control {
        resize: vertical;
        font-family: Futura;
    }

    .btn-primary {
        display: block;
        width: 100%;
        padding: 0.75em;
        font-size: 1.2rem;
        background-color: #ff7e5f;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-family: Futura;
    }

    .btn-primary:hover {
        background-color: #feb47b;
    }
    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        overflow: hidden;
    }

    .modal-content {
        background-color: #fff;
        padding: 2em;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        text-align: center;
        max-width: 400px;
        width: 100%;
    }
</style>

@code {
    private HouseOwnerDto houseOwner;
    private int _userId;
    
    private string _name = string.Empty;
    private string _cpr = string.Empty;
    private string _phone = string.Empty;
    
    private string _address = string.Empty;
    private string _biography = string.Empty;
    
    private string _message = string.Empty;
    private string _profilePictureUrl = string.Empty;
    private bool _showSuccessMessage = false;
    
    private List<FileDto> _uploadResults = new();
    private int maxAllowedFiles = 3;

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/");
    }

    private async Task CreateOwner()
    {
        _message = string.Empty;

        var updateHouseOwnerDto = new UpdateHouseOwnerDto()
        {
            UserId = _userId,
            Name = houseOwner.Name,
            Email = houseOwner.Email,
            Password = houseOwner.Password,
            ProfilePicture = _profilePictureUrl,
            CPR = _cpr,
            Phone = _phone,
            Address = _address,
            Biography = _biography
        };

        try
        {
            HouseOwnerDto created = await HouseOwnerService.UpdateAsync(updateHouseOwnerDto);
            _showSuccessMessage = true;
            _message = $"House Owner updated successfully!";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _message = $"Error: {e.Message}";
        }
    }
    
    private async Task OnInputProfilePictureChange(InputFileChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(_profilePictureUrl))
            await Http.DeleteAsync($"/Filesave/{_profilePictureUrl.Split('.')[0]}/{_profilePictureUrl.Split('.')[1]}");

        long maxFileSize = long.MaxValue;
        var upload = false;

        using var content = new MultipartFormDataContent();

        var file = e.GetMultipleFiles(maxAllowedFiles).FirstOrDefault();
        if (_uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
        {
            try
            {
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType =
                    new MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: file.Name);

                upload = true;
            }
            catch (Exception ex)
            {
                Logger.LogInformation(
                    $"{file.Name} not uploaded (Err: 6): {ex.Message}",
                    file.Name, ex.Message);

                _uploadResults.Add(
                    new()
                    {
                        FileName = file.Name,
                        ErrorCode = 6,
                        Uploaded = false
                    });
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/Filesave", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<FileDto>>();

            if (newUploadResults is not null)
            {
                _profilePictureUrl = newUploadResults.FirstOrDefault()!.StoredFileName!;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState?.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            
            if (user.IsInRole("HouseOwner"))
            {
                var ownerIdClaim = user.FindFirst("Id")?.Value;
                if (ownerIdClaim != null && int.TryParse(ownerIdClaim, out var ownerId))
                {
                    houseOwner = await HouseOwnerService.GetSingleAsync(ownerId);
                    _cpr = houseOwner.CPR;
                    _phone = houseOwner.Phone;
                    _name = houseOwner.Name;
                    _biography = houseOwner.Biography;
                    _profilePictureUrl = houseOwner.ProfilePicture;
                    _address = houseOwner.Address;
                    _userId = ownerId;
                }
            }
        }
        else
        {
            Console.WriteLine("User is NOT authenticated.");
        }
    }
}

}